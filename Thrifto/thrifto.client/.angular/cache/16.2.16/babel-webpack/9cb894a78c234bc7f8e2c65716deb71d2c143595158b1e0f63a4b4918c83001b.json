{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    // Load user from localStorage on startup\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      this.currentUserSubject.next(JSON.parse(storedUser));\n    }\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    }).pipe(tap(user => {\n      // Store user details and token in localStorage\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      this.currentUserSubject.next(user);\n    }));\n  }\n  register(user) {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n  logout() {\n    // Remove user from localStorage\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  isLoggedIn() {\n    return !!this.currentUserSubject.value;\n  }\n  getCurrentUserId() {\n    return this.currentUserSubject.value?.id || null;\n  }\n  getToken() {\n    return this.currentUserSubject.value?.token || null;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","storedUser","localStorage","getItem","next","JSON","parse","login","email","password","post","pipe","user","setItem","stringify","register","logout","removeItem","getCurrentUser","value","isLoggedIn","getCurrentUserId","id","getToken","token","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\services\\auth.service.ts"],"sourcesContent":["// src/app/services/auth.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { User } from '../models/user.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = `${environment.apiUrl}/auth`;\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    // Load user from localStorage on startup\r\n    const storedUser = localStorage.getItem('currentUser');\r\n    if (storedUser) {\r\n      this.currentUserSubject.next(JSON.parse(storedUser));\r\n    }\r\n  }\r\n\r\n  login(email: string, password: string): Observable<User> {\r\n    return this.http.post<User>(`${this.apiUrl}/login`, { email, password })\r\n      .pipe(\r\n        tap(user => {\r\n          // Store user details and token in localStorage\r\n          localStorage.setItem('currentUser', JSON.stringify(user));\r\n          this.currentUserSubject.next(user);\r\n        })\r\n      );\r\n  }\r\n\r\n  register(user: any): Observable<User> {\r\n    return this.http.post<User>(`${this.apiUrl}/register`, user);\r\n  }\r\n\r\n  logout(): void {\r\n    // Remove user from localStorage\r\n    localStorage.removeItem('currentUser');\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return !!this.currentUserSubject.value;\r\n  }\r\n\r\n  getCurrentUserId(): string | null {\r\n    return this.currentUserSubject.value?.id || null;\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return this.currentUserSubject.value?.token || null;\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,eAAe,QAAwB,MAAM;AACtD,SAAcC,GAAG,QAAQ,gBAAgB;AAEzC,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,OAAO;IACrC,KAAAC,kBAAkB,GAAG,IAAIP,eAAe,CAAc,IAAI,CAAC;IAC5D,KAAAQ,YAAY,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;IAG1D;IACA,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAIF,UAAU,EAAE;MACd,IAAI,CAACH,kBAAkB,CAACM,IAAI,CAACC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,CAAC;;EAExD;EAEAM,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAO,GAAG,IAAI,CAACb,MAAM,QAAQ,EAAE;MAAEW,KAAK;MAAEC;IAAQ,CAAE,CAAC,CACrEE,IAAI,CACHnB,GAAG,CAACoB,IAAI,IAAG;MACT;MACAV,YAAY,CAACW,OAAO,CAAC,aAAa,EAAER,IAAI,CAACS,SAAS,CAACF,IAAI,CAAC,CAAC;MACzD,IAAI,CAACd,kBAAkB,CAACM,IAAI,CAACQ,IAAI,CAAC;IACpC,CAAC,CAAC,CACH;EACL;EAEAG,QAAQA,CAACH,IAAS;IAChB,OAAO,IAAI,CAAChB,IAAI,CAACc,IAAI,CAAO,GAAG,IAAI,CAACb,MAAM,WAAW,EAAEe,IAAI,CAAC;EAC9D;EAEAI,MAAMA,CAAA;IACJ;IACAd,YAAY,CAACe,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAACnB,kBAAkB,CAACM,IAAI,CAAC,IAAI,CAAC;EACpC;EAEAc,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACpB,kBAAkB,CAACqB,KAAK;EACtC;EAEAC,UAAUA,CAAA;IACR,OAAO,CAAC,CAAC,IAAI,CAACtB,kBAAkB,CAACqB,KAAK;EACxC;EAEAE,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACvB,kBAAkB,CAACqB,KAAK,EAAEG,EAAE,IAAI,IAAI;EAClD;EAEAC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACzB,kBAAkB,CAACqB,KAAK,EAAEK,KAAK,IAAI,IAAI;EACrD;;;uBAhDW9B,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXlC,WAAW;MAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}