{"ast":null,"code":"import { BehaviorSubject, fromEvent, merge, of } from 'rxjs';\nimport { map, catchError, distinctUntilChanged, debounceTime } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var ConnectionStatus;\n(function (ConnectionStatus) {\n  ConnectionStatus[\"Online\"] = \"ONLINE\";\n  ConnectionStatus[\"Offline\"] = \"OFFLINE\";\n  ConnectionStatus[\"ServerDown\"] = \"SERVER_DOWN\";\n})(ConnectionStatus || (ConnectionStatus = {}));\nexport class NetworkService {\n  constructor(http) {\n    this.http = http;\n    this.connectionStatus = new BehaviorSubject(ConnectionStatus.Online);\n    this.serverCheckInterval = 30000; // 30 seconds\n    this.initializeNetworkListeners();\n    this.checkServerStatus();\n  }\n  get status$() {\n    return this.connectionStatus.asObservable().pipe(distinctUntilChanged());\n  }\n  get isOnline() {\n    return this.connectionStatus.value === ConnectionStatus.Online;\n  }\n  get isOffline() {\n    return this.connectionStatus.value === ConnectionStatus.Offline;\n  }\n  get isServerDown() {\n    return this.connectionStatus.value === ConnectionStatus.ServerDown;\n  }\n  initializeNetworkListeners() {\n    // Browser online/offline events\n    const online$ = fromEvent(window, 'online').pipe(map(() => true));\n    const offline$ = fromEvent(window, 'offline').pipe(map(() => false));\n    merge(online$, offline$).pipe(debounceTime(300)).subscribe(isOnline => {\n      if (!isOnline) {\n        this.connectionStatus.next(ConnectionStatus.Offline);\n        clearTimeout(this.serverCheckTimer);\n      } else {\n        // When back online, check server status\n        this.checkServerStatus();\n      }\n    });\n  }\n  checkServerStatus() {\n    if (navigator.onLine) {\n      // Use a health endpoint that should always respond quickly\n      this.http.get(`${environment.apiUrl}/health`, {\n        responseType: 'text'\n      }).pipe(catchError(() => of('error'))).subscribe(response => {\n        if (response === 'error') {\n          this.connectionStatus.next(ConnectionStatus.ServerDown);\n        } else {\n          this.connectionStatus.next(ConnectionStatus.Online);\n        }\n        // Schedule next check\n        this.serverCheckTimer = setTimeout(() => this.checkServerStatus(), this.serverCheckInterval);\n      });\n    }\n  }\n  // Force a check of the server status\n  checkConnection() {\n    this.checkServerStatus();\n  }\n  static {\n    this.ɵfac = function NetworkService_Factory(t) {\n      return new (t || NetworkService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NetworkService,\n      factory: NetworkService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","fromEvent","merge","of","map","catchError","distinctUntilChanged","debounceTime","environment","ConnectionStatus","NetworkService","constructor","http","connectionStatus","Online","serverCheckInterval","initializeNetworkListeners","checkServerStatus","status$","asObservable","pipe","isOnline","value","isOffline","Offline","isServerDown","ServerDown","online$","window","offline$","subscribe","next","clearTimeout","serverCheckTimer","navigator","onLine","get","apiUrl","responseType","response","setTimeout","checkConnection","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\services\\network.service.ts"],"sourcesContent":["// src/app/services/network.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, fromEvent, merge, of } from 'rxjs';\r\nimport { map, catchError, distinctUntilChanged, debounceTime } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport enum ConnectionStatus {\r\n  Online = 'ONLINE',\r\n  Offline = 'OFFLINE',\r\n  ServerDown = 'SERVER_DOWN'\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NetworkService {\r\n  private connectionStatus = new BehaviorSubject<ConnectionStatus>(ConnectionStatus.Online);\r\n  private serverCheckInterval = 30000; // 30 seconds\r\n  private serverCheckTimer: any;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.initializeNetworkListeners();\r\n    this.checkServerStatus();\r\n  }\r\n\r\n  get status$(): Observable<ConnectionStatus> {\r\n    return this.connectionStatus.asObservable().pipe(\r\n      distinctUntilChanged()\r\n    );\r\n  }\r\n\r\n  get isOnline(): boolean {\r\n    return this.connectionStatus.value === ConnectionStatus.Online;\r\n  }\r\n\r\n  get isOffline(): boolean {\r\n    return this.connectionStatus.value === ConnectionStatus.Offline;\r\n  }\r\n\r\n  get isServerDown(): boolean {\r\n    return this.connectionStatus.value === ConnectionStatus.ServerDown;\r\n  }\r\n\r\n  private initializeNetworkListeners(): void {\r\n    // Browser online/offline events\r\n    const online$ = fromEvent(window, 'online').pipe(map(() => true));\r\n    const offline$ = fromEvent(window, 'offline').pipe(map(() => false));\r\n\r\n    merge(online$, offline$)\r\n      .pipe(debounceTime(300))\r\n      .subscribe(isOnline => {\r\n        if (!isOnline) {\r\n          this.connectionStatus.next(ConnectionStatus.Offline);\r\n          clearTimeout(this.serverCheckTimer);\r\n        } else {\r\n          // When back online, check server status\r\n          this.checkServerStatus();\r\n        }\r\n      });\r\n  }\r\n\r\n  private checkServerStatus(): void {\r\n    if (navigator.onLine) {\r\n      // Use a health endpoint that should always respond quickly\r\n      this.http.get(`${environment.apiUrl}/health`, { responseType: 'text' })\r\n        .pipe(\r\n          catchError(() => of('error'))\r\n        )\r\n        .subscribe(response => {\r\n          if (response === 'error') {\r\n            this.connectionStatus.next(ConnectionStatus.ServerDown);\r\n          } else {\r\n            this.connectionStatus.next(ConnectionStatus.Online);\r\n          }\r\n\r\n          // Schedule next check\r\n          this.serverCheckTimer = setTimeout(() => this.checkServerStatus(), this.serverCheckInterval);\r\n        });\r\n    }\r\n  }\r\n\r\n  // Force a check of the server status\r\n  public checkConnection(): void {\r\n    this.checkServerStatus();\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}