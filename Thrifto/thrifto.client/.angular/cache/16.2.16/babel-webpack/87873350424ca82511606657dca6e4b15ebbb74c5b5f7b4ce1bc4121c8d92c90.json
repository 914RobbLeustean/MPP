{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    // Load user from localStorage on startup\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      this.currentUserSubject.next(JSON.parse(storedUser));\n    }\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      // Only store user if login is complete (no 2FA required)\n      if (!response.requiresTwoFactor && response.token) {\n        const user = {\n          id: response.id,\n          username: response.username,\n          email: response.email,\n          firstName: response.firstName,\n          lastName: response.lastName,\n          token: response.token\n        };\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n      }\n    }));\n  }\n  verifyTwoFactor(twoFactorData) {\n    return this.http.post(`${this.apiUrl}/2fa/verify`, twoFactorData).pipe(tap(user => {\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      this.currentUserSubject.next(user);\n    }));\n  }\n  register(user) {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n  logout() {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n  // 2FA Management Methods\n  setup2FA() {\n    return this.http.get(`${this.apiUrl}/2fa/setup`);\n  }\n  enable2FA(code) {\n    const enableDto = {\n      code\n    };\n    return this.http.post(`${this.apiUrl}/2fa/enable`, enableDto);\n  }\n  disable2FA() {\n    return this.http.post(`${this.apiUrl}/2fa/disable`, {});\n  }\n  get2FAStatus() {\n    return this.http.get(`${this.apiUrl}/2fa/status`);\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  isLoggedIn() {\n    return !!this.currentUserSubject.value;\n  }\n  getCurrentUserId() {\n    return this.currentUserSubject.value?.id || null;\n  }\n  getToken() {\n    return this.currentUserSubject.value?.token || null;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","storedUser","localStorage","getItem","next","JSON","parse","login","email","password","post","pipe","response","requiresTwoFactor","token","user","id","username","firstName","lastName","setItem","stringify","verifyTwoFactor","twoFactorData","register","logout","removeItem","setup2FA","get","enable2FA","code","enableDto","disable2FA","get2FAStatus","getCurrentUser","value","isLoggedIn","getCurrentUserId","getToken","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\services\\auth.service.ts"],"sourcesContent":["// src/app/services/auth.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { User } from '../models/user.model';\r\nimport {\r\n    TwoFactorSetupDto,\r\n    EnableTwoFactorDto,\r\n    TwoFactorLoginDto,\r\n    LoginResponse,\r\n    TwoFactorStatusResponse\r\n} from '../models/two-factor.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = `${environment.apiUrl}/auth`;\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    // Load user from localStorage on startup\r\n    const storedUser = localStorage.getItem('currentUser');\r\n    if (storedUser) {\r\n      this.currentUserSubject.next(JSON.parse(storedUser));\r\n    }\r\n  }\r\n\r\n    login(email: string, password: string): Observable<LoginResponse> {\r\n        return this.http.post<LoginResponse>(`${this.apiUrl}/login`, { email, password })\r\n            .pipe(\r\n                tap(response => {\r\n                    // Only store user if login is complete (no 2FA required)\r\n                    if (!response.requiresTwoFactor && response.token) {\r\n                        const user: User = {\r\n                            id: response.id!,\r\n                            username: response.username!,\r\n                            email: response.email!,\r\n                            firstName: response.firstName!,\r\n                            lastName: response.lastName!,\r\n                            token: response.token\r\n                        };\r\n                        localStorage.setItem('currentUser', JSON.stringify(user));\r\n                        this.currentUserSubject.next(user);\r\n                    }\r\n                })\r\n            );\r\n    }\r\n\r\n    verifyTwoFactor(twoFactorData: TwoFactorLoginDto): Observable<User> {\r\n        return this.http.post<User>(`${this.apiUrl}/2fa/verify`, twoFactorData)\r\n            .pipe(\r\n                tap(user => {\r\n                    localStorage.setItem('currentUser', JSON.stringify(user));\r\n                    this.currentUserSubject.next(user);\r\n                })\r\n            );\r\n    }\r\n\r\n    register(user: any): Observable<User> {\r\n        return this.http.post<User>(`${this.apiUrl}/register`, user);\r\n    }\r\n\r\n    logout(): void {\r\n        localStorage.removeItem('currentUser');\r\n        this.currentUserSubject.next(null);\r\n    }\r\n\r\n    // 2FA Management Methods\r\n    setup2FA(): Observable<TwoFactorSetupDto> {\r\n        return this.http.get<TwoFactorSetupDto>(`${this.apiUrl}/2fa/setup`);\r\n    }\r\n\r\n    enable2FA(code: string): Observable<TwoFactorSetupDto> {\r\n        const enableDto: EnableTwoFactorDto = { code };\r\n        return this.http.post<TwoFactorSetupDto>(`${this.apiUrl}/2fa/enable`, enableDto);\r\n    }\r\n\r\n    disable2FA(): Observable<any> {\r\n        return this.http.post(`${this.apiUrl}/2fa/disable`, {});\r\n    }\r\n\r\n    get2FAStatus(): Observable<TwoFactorStatusResponse> {\r\n        return this.http.get<TwoFactorStatusResponse>(`${this.apiUrl}/2fa/status`);\r\n    }\r\n\r\n    getCurrentUser(): User | null {\r\n        return this.currentUserSubject.value;\r\n    }\r\n\r\n    isLoggedIn(): boolean {\r\n        return !!this.currentUserSubject.value;\r\n    }\r\n\r\n    getCurrentUserId(): string | null {\r\n        return this.currentUserSubject.value?.id || null;\r\n    }\r\n\r\n    getToken(): string | null {\r\n        return this.currentUserSubject.value?.token || null;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}