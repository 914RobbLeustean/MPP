{"ast":null,"code":"import { __decorate } from \"tslib\";\n// src/app/components/account-settings/account-settings.component.ts\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil, finalize } from 'rxjs/operators';\nexport let AccountSettingsComponent = class AccountSettingsComponent {\n  constructor(authService, notificationService, formBuilder, router // ADD: Router injection\n  ) {\n    this.authService = authService;\n    this.notificationService = notificationService;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.destroy$ = new Subject();\n    this.currentUser = null;\n    this.twoFactorEnabled = false;\n    this.isLoading = true;\n    this.isSubmitting = false;\n    this.setupData = null;\n    this.showSetupForm = false;\n    this.recoveryCodes = [];\n    this.showRecoveryCodes = false;\n    this.setupForm = this.formBuilder.group({\n      code: ['', [Validators.required, Validators.pattern(/^\\d{6}$/)]]\n    });\n  }\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentUser();\n    this.loadTwoFactorStatus();\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  get f() {\n    return this.setupForm.controls;\n  }\n  // ADD: Navigation methods for the CTA buttons\n  navigateToSecurityCenter() {\n    this.router.navigate(['/security-center']);\n  }\n  navigateToSecurityHelp() {\n    this.router.navigate(['/security-help']);\n  }\n  // Existing methods remain unchanged...\n  loadTwoFactorStatus() {\n    this.authService.get2FAStatus().pipe(takeUntil(this.destroy$), finalize(() => this.isLoading = false)).subscribe({\n      next: response => {\n        this.twoFactorEnabled = response.twoFactorEnabled;\n      },\n      error: error => {\n        console.error('Failed to load 2FA status:', error);\n        this.notificationService.show('Failed to load security settings', 'error');\n      }\n    });\n  }\n  startTwoFactorSetup() {\n    this.isSubmitting = true;\n    this.authService.setup2FA().pipe(takeUntil(this.destroy$), finalize(() => this.isSubmitting = false)).subscribe({\n      next: response => {\n        this.setupData = response;\n        this.showSetupForm = true;\n      },\n      error: error => {\n        console.error('Failed to setup 2FA:', error);\n        this.notificationService.show('Failed to generate authentication setup', 'error');\n      }\n    });\n  }\n  enableTwoFactor() {\n    if (this.setupForm.invalid) {\n      this.setupForm.markAllAsTouched();\n      return;\n    }\n    this.isSubmitting = true;\n    this.authService.enable2FA(this.f['code'].value).pipe(takeUntil(this.destroy$), finalize(() => this.isSubmitting = false)).subscribe({\n      next: response => {\n        this.twoFactorEnabled = true;\n        this.showSetupForm = false;\n        this.recoveryCodes = response.recoveryCodes || [];\n        this.showRecoveryCodes = true;\n        this.setupForm.reset();\n        this.notificationService.show('Two-factor authentication enabled successfully!', 'success');\n      },\n      error: error => {\n        console.error('Failed to enable 2FA:', error);\n        const errorMessage = error.error?.message || 'Invalid verification code. Please try again.';\n        this.notificationService.show(errorMessage, 'error');\n      }\n    });\n  }\n  disableTwoFactor() {\n    const confirmMessage = 'Are you sure you want to disable two-factor authentication?\\n\\nThis will make your account less secure.';\n    if (!confirm(confirmMessage)) {\n      return;\n    }\n    this.isSubmitting = true;\n    this.authService.disable2FA().pipe(takeUntil(this.destroy$), finalize(() => this.isSubmitting = false)).subscribe({\n      next: () => {\n        this.twoFactorEnabled = false;\n        this.notificationService.show('Two-factor authentication has been disabled', 'success');\n      },\n      error: error => {\n        console.error('Failed to disable 2FA:', error);\n        this.notificationService.show('Failed to disable two-factor authentication', 'error');\n      }\n    });\n  }\n  cancelSetup() {\n    this.showSetupForm = false;\n    this.setupData = null;\n    this.setupForm.reset();\n  }\n  copyManualKey() {\n    if (!this.setupData?.manualEntryKey) {\n      return;\n    }\n    navigator.clipboard.writeText(this.setupData.manualEntryKey).then(() => {\n      this.notificationService.show('Authentication key copied to clipboard', 'success');\n    }).catch(() => {\n      this.notificationService.show('Failed to copy key', 'error');\n    });\n  }\n  downloadRecoveryCodes() {\n    if (this.recoveryCodes.length === 0) {\n      return;\n    }\n    const content = ['Thrifto Account Recovery Codes', '================================', '', 'These codes can be used to access your account if you lose access to your authenticator app.', 'Each code can only be used once.', '', 'Generated on: ' + new Date().toLocaleString(), '', ...this.recoveryCodes.map((code, index) => `${index + 1}. ${code}`)].join('\\n');\n    const blob = new Blob([content], {\n      type: 'text/plain'\n    });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `thrifto-recovery-codes-${new Date().toISOString().split('T')[0]}.txt`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n    this.notificationService.show('Recovery codes downloaded successfully', 'success');\n  }\n  copyRecoveryCodes() {\n    if (this.recoveryCodes.length === 0) {\n      return;\n    }\n    const content = this.recoveryCodes.join('\\n');\n    navigator.clipboard.writeText(content).then(() => {\n      this.notificationService.show('Recovery codes copied to clipboard', 'success');\n    }).catch(() => {\n      this.notificationService.show('Failed to copy recovery codes', 'error');\n    });\n  }\n  acknowledgeRecoveryCodes() {\n    this.showRecoveryCodes = false;\n    this.recoveryCodes = [];\n  }\n};\nAccountSettingsComponent = __decorate([Component({\n  selector: 'app-account-settings',\n  templateUrl: './account-settings.component.html',\n  styleUrls: ['./account-settings.component.scss']\n})], AccountSettingsComponent);","map":{"version":3,"names":["Component","Validators","Subject","takeUntil","finalize","AccountSettingsComponent","constructor","authService","notificationService","formBuilder","router","destroy$","currentUser","twoFactorEnabled","isLoading","isSubmitting","setupData","showSetupForm","recoveryCodes","showRecoveryCodes","setupForm","group","code","required","pattern","ngOnInit","getCurrentUser","loadTwoFactorStatus","ngOnDestroy","next","complete","f","controls","navigateToSecurityCenter","navigate","navigateToSecurityHelp","get2FAStatus","pipe","subscribe","response","error","console","show","startTwoFactorSetup","setup2FA","enableTwoFactor","invalid","markAllAsTouched","enable2FA","value","reset","errorMessage","message","disableTwoFactor","confirmMessage","confirm","disable2FA","cancelSetup","copyManualKey","manualEntryKey","navigator","clipboard","writeText","then","catch","downloadRecoveryCodes","length","content","Date","toLocaleString","map","index","join","blob","Blob","type","url","window","URL","createObjectURL","link","document","createElement","href","download","toISOString","split","body","appendChild","click","removeChild","revokeObjectURL","copyRecoveryCodes","acknowledgeRecoveryCodes","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\components\\account-settings\\account-settings.component.ts"],"sourcesContent":["// src/app/components/account-settings/account-settings.component.ts\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router'; // ADD: Router import\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil, finalize } from 'rxjs/operators';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport {\r\n} from '../../services/notification.service';\r\nimport { TwoFactorSetupDto } from '../../models/two-factor.model';\r\nimport { User } from '../../models/user.model';\r\n\r\n@Component({\r\n    selector: 'app-account-settings',\r\n    templateUrl: './account-settings.component.html',\r\n    styleUrls: ['./account-settings.component.scss']\r\n})\r\nexport class AccountSettingsComponent implements OnInit, OnDestroy {\r\n    private destroy$ = new Subject<void>();\r\n\r\n    currentUser: User | null = null;\r\n    twoFactorEnabled = false;\r\n    isLoading = true;\r\n    isSubmitting = false;\r\n\r\n    // 2FA Setup\r\n    setupForm: FormGroup;\r\n    setupData: TwoFactorSetupDto | null = null;\r\n    showSetupForm = false;\r\n    recoveryCodes: string[] = [];\r\n    showRecoveryCodes = false;\r\n\r\n    constructor(\r\n        private authService: AuthService,\r\n        private notificationService: NotificationService,\r\n        private formBuilder: FormBuilder,\r\n        private router: Router // ADD: Router injection\r\n    ) {\r\n        this.setupForm = this.formBuilder.group({\r\n            code: ['', [Validators.required, Validators.pattern(/^\\d{6}$/)]]\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.currentUser = this.authService.getCurrentUser();\r\n        this.loadTwoFactorStatus();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    get f() {\r\n        return this.setupForm.controls;\r\n    }\r\n\r\n    // ADD: Navigation methods for the CTA buttons\r\n    navigateToSecurityCenter(): void {\r\n        this.router.navigate(['/security-center']);\r\n    }\r\n\r\n    navigateToSecurityHelp(): void {\r\n        this.router.navigate(['/security-help']);\r\n    }\r\n\r\n    // Existing methods remain unchanged...\r\n    private loadTwoFactorStatus(): void {\r\n        this.authService.get2FAStatus()\r\n            .pipe(\r\n                takeUntil(this.destroy$),\r\n                finalize(() => this.isLoading = false)\r\n            )\r\n            .subscribe({\r\n                next: (response) => {\r\n                    this.twoFactorEnabled = response.twoFactorEnabled;\r\n                },\r\n                error: (error) => {\r\n                    console.error('Failed to load 2FA status:', error);\r\n                    this.notificationService.show('Failed to load security settings', 'error');\r\n                }\r\n            });\r\n    }\r\n\r\n    startTwoFactorSetup(): void {\r\n        this.isSubmitting = true;\r\n\r\n        this.authService.setup2FA()\r\n            .pipe(\r\n                takeUntil(this.destroy$),\r\n                finalize(() => this.isSubmitting = false)\r\n            )\r\n            .subscribe({\r\n                next: (response) => {\r\n                    this.setupData = response;\r\n                    this.showSetupForm = true;\r\n                },\r\n                error: (error) => {\r\n                    console.error('Failed to setup 2FA:', error);\r\n                    this.notificationService.show('Failed to generate authentication setup', 'error');\r\n                }\r\n            });\r\n    }\r\n\r\n    enableTwoFactor(): void {\r\n        if (this.setupForm.invalid) {\r\n            this.setupForm.markAllAsTouched();\r\n            return;\r\n        }\r\n\r\n        this.isSubmitting = true;\r\n\r\n        this.authService.enable2FA(this.f['code'].value)\r\n            .pipe(\r\n                takeUntil(this.destroy$),\r\n                finalize(() => this.isSubmitting = false)\r\n            )\r\n            .subscribe({\r\n                next: (response) => {\r\n                    this.twoFactorEnabled = true;\r\n                    this.showSetupForm = false;\r\n                    this.recoveryCodes = response.recoveryCodes || [];\r\n                    this.showRecoveryCodes = true;\r\n                    this.setupForm.reset();\r\n                    this.notificationService.show('Two-factor authentication enabled successfully!', 'success');\r\n                },\r\n                error: (error) => {\r\n                    console.error('Failed to enable 2FA:', error);\r\n                    const errorMessage = error.error?.message || 'Invalid verification code. Please try again.';\r\n                    this.notificationService.show(errorMessage, 'error');\r\n                }\r\n            });\r\n    }\r\n\r\n    disableTwoFactor(): void {\r\n        const confirmMessage = 'Are you sure you want to disable two-factor authentication?\\n\\nThis will make your account less secure.';\r\n\r\n        if (!confirm(confirmMessage)) {\r\n            return;\r\n        }\r\n\r\n        this.isSubmitting = true;\r\n\r\n        this.authService.disable2FA()\r\n            .pipe(\r\n                takeUntil(this.destroy$),\r\n                finalize(() => this.isSubmitting = false)\r\n            )\r\n            .subscribe({\r\n                next: () => {\r\n                    this.twoFactorEnabled = false;\r\n                    this.notificationService.show('Two-factor authentication has been disabled', 'success');\r\n                },\r\n                error: (error) => {\r\n                    console.error('Failed to disable 2FA:', error);\r\n                    this.notificationService.show('Failed to disable two-factor authentication', 'error');\r\n                }\r\n            });\r\n    }\r\n\r\n    cancelSetup(): void {\r\n        this.showSetupForm = false;\r\n        this.setupData = null;\r\n        this.setupForm.reset();\r\n    }\r\n\r\n    copyManualKey(): void {\r\n        if (!this.setupData?.manualEntryKey) {\r\n            return;\r\n        }\r\n\r\n        navigator.clipboard.writeText(this.setupData.manualEntryKey).then(() => {\r\n            this.notificationService.show('Authentication key copied to clipboard', 'success');\r\n        }).catch(() => {\r\n            this.notificationService.show('Failed to copy key', 'error');\r\n        });\r\n    }\r\n\r\n    downloadRecoveryCodes(): void {\r\n        if (this.recoveryCodes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const content = [\r\n            'Thrifto Account Recovery Codes',\r\n            '================================',\r\n            '',\r\n            'These codes can be used to access your account if you lose access to your authenticator app.',\r\n            'Each code can only be used once.',\r\n            '',\r\n            'Generated on: ' + new Date().toLocaleString(),\r\n            '',\r\n            ...this.recoveryCodes.map((code, index) => `${index + 1}. ${code}`)\r\n        ].join('\\n');\r\n\r\n        const blob = new Blob([content], { type: 'text/plain' });\r\n        const url = window.URL.createObjectURL(blob);\r\n        const link = document.createElement('a');\r\n\r\n        link.href = url;\r\n        link.download = `thrifto-recovery-codes-${new Date().toISOString().split('T')[0]}.txt`;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n\r\n        window.URL.revokeObjectURL(url);\r\n        this.notificationService.show('Recovery codes downloaded successfully', 'success');\r\n    }\r\n\r\n    copyRecoveryCodes(): void {\r\n        if (this.recoveryCodes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const content = this.recoveryCodes.join('\\n');\r\n\r\n        navigator.clipboard.writeText(content).then(() => {\r\n            this.notificationService.show('Recovery codes copied to clipboard', 'success');\r\n        }).catch(() => {\r\n            this.notificationService.show('Failed to copy recovery codes', 'error');\r\n        });\r\n    }\r\n\r\n    acknowledgeRecoveryCodes(): void {\r\n        this.showRecoveryCodes = false;\r\n        this.recoveryCodes = [];\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}