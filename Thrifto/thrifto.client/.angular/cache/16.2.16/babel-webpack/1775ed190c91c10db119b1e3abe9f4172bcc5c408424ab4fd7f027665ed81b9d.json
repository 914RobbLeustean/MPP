{"ast":null,"code":"import { ConnectionStatus } from '../../../services/network.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/network.service\";\nfunction NetworkStatusComponent_div_0_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 7);\n    i0.ɵɵelement(1, \"i\", 8);\n    i0.ɵɵtext(2, \" Offline - Changes will sync when connection is restored \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NetworkStatusComponent_div_0_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵelement(1, \"i\", 10);\n    i0.ɵɵtext(2, \" Server Down - Working in offline mode \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NetworkStatusComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2);\n    i0.ɵɵelementContainerStart(2, 3);\n    i0.ɵɵtemplate(3, NetworkStatusComponent_div_0_span_3_Template, 3, 0, \"span\", 4);\n    i0.ɵɵtemplate(4, NetworkStatusComponent_div_0_span_4_Template, 3, 0, \"span\", 5);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function NetworkStatusComponent_div_0_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.checkConnection());\n    });\n    i0.ɵɵtext(6, \" Check Connection \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.connectionStatus.toLowerCase());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngSwitch\", ctx_r0.connectionStatus);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", ctx_r0.ConnectionStatus.Offline);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", ctx_r0.ConnectionStatus.ServerDown);\n  }\n}\nexport class NetworkStatusComponent {\n  constructor(networkService) {\n    this.networkService = networkService;\n    this.connectionStatus = ConnectionStatus.Online;\n    this.statusSubscription = null;\n    // For template comparison\n    this.ConnectionStatus = ConnectionStatus;\n  }\n  ngOnInit() {\n    this.statusSubscription = this.networkService.status$.subscribe(status => this.connectionStatus = status);\n  }\n  ngOnDestroy() {\n    if (this.statusSubscription) {\n      this.statusSubscription.unsubscribe();\n    }\n  }\n  checkConnection() {\n    this.networkService.checkConnection();\n  }\n  static {\n    this.ɵfac = function NetworkStatusComponent_Factory(t) {\n      return new (t || NetworkStatusComponent)(i0.ɵɵdirectiveInject(i1.NetworkService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: NetworkStatusComponent,\n      selectors: [[\"app-network-status\"]],\n      decls: 1,\n      vars: 1,\n      consts: [[\"class\", \"network-status-container\", 3, \"ngClass\", 4, \"ngIf\"], [1, \"network-status-container\", 3, \"ngClass\"], [1, \"status-indicator\"], [3, \"ngSwitch\"], [\"class\", \"offline\", 4, \"ngSwitchCase\"], [\"class\", \"server-down\", 4, \"ngSwitchCase\"], [1, \"check-connection-btn\", 3, \"click\"], [1, \"offline\"], [1, \"fas\", \"fa-wifi-slash\"], [1, \"server-down\"], [1, \"fas\", \"fa-server\"]],\n      template: function NetworkStatusComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, NetworkStatusComponent_div_0_Template, 7, 4, \"div\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.connectionStatus !== ctx.ConnectionStatus.Online);\n        }\n      },\n      styles: [\"\\n\\n.network-status-container[_ngcontent-%COMP%] {\\n  position: fixed;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n  padding: 8px 16px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  z-index: 1000;\\n  transition: all 0.3s ease-in-out;\\n  transform: translateY(100%);\\n}\\n.network-status-container.online[_ngcontent-%COMP%] {\\n  background-color: rgba(76, 175, 80, 0.9);\\n  transform: translateY(100%);\\n}\\n.network-status-container.offline[_ngcontent-%COMP%] {\\n  background-color: rgba(255, 152, 0, 0.9);\\n  transform: translateY(0);\\n}\\n.network-status-container.server-down[_ngcontent-%COMP%] {\\n  background-color: rgba(244, 67, 54, 0.9);\\n  transform: translateY(0);\\n}\\n.network-status-container[_ngcontent-%COMP%]   .status-indicator[_ngcontent-%COMP%] {\\n  color: white;\\n  font-weight: 500;\\n}\\n.network-status-container[_ngcontent-%COMP%]   .status-indicator[_ngcontent-%COMP%]   i[_ngcontent-%COMP%] {\\n  margin-right: 6px;\\n}\\n.network-status-container[_ngcontent-%COMP%]   .check-connection-btn[_ngcontent-%COMP%] {\\n  background: rgba(255, 255, 255, 0.2);\\n  color: white;\\n  border: 1px solid white;\\n  border-radius: 4px;\\n  padding: 4px 8px;\\n  cursor: pointer;\\n  transition: background 0.2s ease;\\n}\\n.network-status-container[_ngcontent-%COMP%]   .check-connection-btn[_ngcontent-%COMP%]:hover {\\n  background: rgba(255, 255, 255, 0.3);\\n}\\n.network-status-container.online[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_fadeOut 2s forwards;\\n  animation-delay: 3s;\\n}\\n\\n@keyframes _ngcontent-%COMP%_fadeOut {\\n  from {\\n    transform: translateY(0);\\n    opacity: 1;\\n  }\\n  to {\\n    transform: translateY(100%);\\n    opacity: 0;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9zaGFyZWQvbmV0d29yay1zdGF0dXMvbmV0d29yay1zdGF0dXMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkVBQUE7QUFDQTtFQUNFLGVBQUE7RUFDQSxTQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxpQkFBQTtFQUNBLGFBQUE7RUFDQSw4QkFBQTtFQUNBLG1CQUFBO0VBQ0EsYUFBQTtFQUNBLGdDQUFBO0VBQ0EsMkJBQUE7QUFDRjtBQUNFO0VBQ0Usd0NBQUE7RUFDQSwyQkFBQTtBQUNKO0FBRUU7RUFDRSx3Q0FBQTtFQUNBLHdCQUFBO0FBQUo7QUFHRTtFQUNFLHdDQUFBO0VBQ0Esd0JBQUE7QUFESjtBQUlFO0VBQ0UsWUFBQTtFQUNBLGdCQUFBO0FBRko7QUFJSTtFQUNFLGlCQUFBO0FBRk47QUFNRTtFQUNFLG9DQUFBO0VBQ0EsWUFBQTtFQUNBLHVCQUFBO0VBQ0Esa0JBQUE7RUFDQSxnQkFBQTtFQUNBLGVBQUE7RUFDQSxnQ0FBQTtBQUpKO0FBTUk7RUFDRSxvQ0FBQTtBQUpOO0FBUUU7RUFDRSw4QkFBQTtFQUNBLG1CQUFBO0FBTko7O0FBVUE7RUFDRTtJQUNFLHdCQUFBO0lBQ0EsVUFBQTtFQVBGO0VBVUE7SUFDRSwyQkFBQTtJQUNBLFVBQUE7RUFSRjtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyogc3JjL2FwcC9jb21wb25lbnRzL3NoYXJlZC9uZXR3b3JrLXN0YXR1cy9uZXR3b3JrLXN0YXR1cy5jb21wb25lbnQuc2NzcyAqL1xyXG4ubmV0d29yay1zdGF0dXMtY29udGFpbmVyIHtcclxuICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgYm90dG9tOiAwO1xyXG4gIGxlZnQ6IDA7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgcGFkZGluZzogOHB4IDE2cHg7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICB6LWluZGV4OiAxMDAwO1xyXG4gIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UtaW4tb3V0O1xyXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMDAlKTtcclxuXHJcbiAgJi5vbmxpbmUge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg3NiwgMTc1LCA4MCwgMC45KTtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMDAlKTsgLy8gSGlkZSB3aGVuIG9ubGluZVxyXG4gIH1cclxuXHJcbiAgJi5vZmZsaW5lIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAxNTIsIDAsIDAuOSk7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XHJcbiAgfVxyXG5cclxuICAmLnNlcnZlci1kb3duIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjQ0LCA2NywgNTQsIDAuOSk7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XHJcbiAgfVxyXG5cclxuICAuc3RhdHVzLWluZGljYXRvciB7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBmb250LXdlaWdodDogNTAwO1xyXG5cclxuICAgIGkge1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IDZweDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5jaGVjay1jb25uZWN0aW9uLWJ0biB7XHJcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIHBhZGRpbmc6IDRweCA4cHg7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuMnMgZWFzZTtcclxuXHJcbiAgICAmOmhvdmVyIHtcclxuICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpO1xyXG4gICAgfVxyXG4gIH1cclxuICAvLyBGb3Igb25saW5lIHN0YXR1cywgd2UnbGwgc2hvdyBicmllZmx5IHRoZW4gaGlkZVxyXG4gICYub25saW5lIHtcclxuICAgIGFuaW1hdGlvbjogZmFkZU91dCAycyBmb3J3YXJkcztcclxuICAgIGFuaW1hdGlvbi1kZWxheTogM3M7XHJcbiAgfVxyXG59XHJcblxyXG5Aa2V5ZnJhbWVzIGZhZGVPdXQge1xyXG4gIGZyb20ge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xyXG4gICAgb3BhY2l0eTogMTtcclxuICB9XHJcblxyXG4gIHRvIHtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMDAlKTtcclxuICAgIG9wYWNpdHk6IDA7XHJcbiAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"names":["ConnectionStatus","i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵelementContainerStart","ɵɵtemplate","NetworkStatusComponent_div_0_span_3_Template","NetworkStatusComponent_div_0_span_4_Template","ɵɵelementContainerEnd","ɵɵlistener","NetworkStatusComponent_div_0_Template_button_click_5_listener","ɵɵrestoreView","_r4","ctx_r3","ɵɵnextContext","ɵɵresetView","checkConnection","ɵɵproperty","ctx_r0","connectionStatus","toLowerCase","ɵɵadvance","Offline","ServerDown","NetworkStatusComponent","constructor","networkService","Online","statusSubscription","ngOnInit","status$","subscribe","status","ngOnDestroy","unsubscribe","ɵɵdirectiveInject","i1","NetworkService","selectors","decls","vars","consts","template","NetworkStatusComponent_Template","rf","ctx","NetworkStatusComponent_div_0_Template"],"sources":["C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\components\\shared\\network-status\\network-status.component.ts","C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\components\\shared\\network-status\\network-status.component.html"],"sourcesContent":["// src/app/components/shared/network-status/network-status.component.ts\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { NetworkService, ConnectionStatus } from '../../../services/network.service';\r\n\r\n@Component({\r\n  selector: 'app-network-status',\r\n  templateUrl: './network-status.component.html',\r\n  styleUrls: ['./network-status.component.scss']\r\n})\r\nexport class NetworkStatusComponent implements OnInit, OnDestroy {\r\n  connectionStatus: ConnectionStatus = ConnectionStatus.Online;\r\n  private statusSubscription: Subscription | null = null;\r\n\r\n  // For template comparison\r\n  ConnectionStatus = ConnectionStatus;\r\n\r\n  constructor(private networkService: NetworkService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.statusSubscription = this.networkService.status$.subscribe(\r\n      status => this.connectionStatus = status\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.statusSubscription) {\r\n      this.statusSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  checkConnection(): void {\r\n    this.networkService.checkConnection();\r\n  }\r\n}\r\n","<!-- src/app/components/shared/network-status/network-status.component.html -->\r\n<!-- CHANGE: Only show the status bar when there are connection issues -->\r\n<div *ngIf=\"connectionStatus !== ConnectionStatus.Online\"\r\n     class=\"network-status-container\"\r\n     [ngClass]=\"connectionStatus.toLowerCase()\">\r\n    <div class=\"status-indicator\">\r\n        <ng-container [ngSwitch]=\"connectionStatus\">\r\n            <!-- REMOVE: Online case since we're not showing it anymore -->\r\n            <span *ngSwitchCase=\"ConnectionStatus.Offline\" class=\"offline\">\r\n                <i class=\"fas fa-wifi-slash\"></i> Offline - Changes will sync when connection is restored\r\n            </span>\r\n            <span *ngSwitchCase=\"ConnectionStatus.ServerDown\" class=\"server-down\">\r\n                <i class=\"fas fa-server\"></i> Server Down - Working in offline mode\r\n            </span>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <button class=\"check-connection-btn\" (click)=\"checkConnection()\">\r\n        Check Connection\r\n    </button>\r\n</div>"],"mappings":"AAGA,SAAyBA,gBAAgB,QAAQ,mCAAmC;;;;;ICKxEC,EAAA,CAAAC,cAAA,cAA+D;IAC3DD,EAAA,CAAAE,SAAA,WAAiC;IAACF,EAAA,CAAAG,MAAA,gEACtC;IAAAH,EAAA,CAAAI,YAAA,EAAO;;;;;IACPJ,EAAA,CAAAC,cAAA,cAAsE;IAClED,EAAA,CAAAE,SAAA,YAA6B;IAACF,EAAA,CAAAG,MAAA,8CAClC;IAAAH,EAAA,CAAAI,YAAA,EAAO;;;;;;IAXnBJ,EAAA,CAAAC,cAAA,aAEgD;IAExCD,EAAA,CAAAK,uBAAA,MAA4C;IAExCL,EAAA,CAAAM,UAAA,IAAAC,4CAAA,kBAEO;IACPP,EAAA,CAAAM,UAAA,IAAAE,4CAAA,kBAEO;IACXR,EAAA,CAAAS,qBAAA,EAAe;IACnBT,EAAA,CAAAI,YAAA,EAAM;IAENJ,EAAA,CAAAC,cAAA,gBAAiE;IAA5BD,EAAA,CAAAU,UAAA,mBAAAC,8DAAA;MAAAX,EAAA,CAAAY,aAAA,CAAAC,GAAA;MAAA,MAAAC,MAAA,GAAAd,EAAA,CAAAe,aAAA;MAAA,OAASf,EAAA,CAAAgB,WAAA,CAAAF,MAAA,CAAAG,eAAA,EAAiB;IAAA,EAAC;IAC5DjB,EAAA,CAAAG,MAAA,yBACJ;IAAAH,EAAA,CAAAI,YAAA,EAAS;;;;IAfRJ,EAAA,CAAAkB,UAAA,YAAAC,MAAA,CAAAC,gBAAA,CAAAC,WAAA,GAA0C;IAEzBrB,EAAA,CAAAsB,SAAA,GAA6B;IAA7BtB,EAAA,CAAAkB,UAAA,aAAAC,MAAA,CAAAC,gBAAA,CAA6B;IAEhCpB,EAAA,CAAAsB,SAAA,GAAsC;IAAtCtB,EAAA,CAAAkB,UAAA,iBAAAC,MAAA,CAAApB,gBAAA,CAAAwB,OAAA,CAAsC;IAGtCvB,EAAA,CAAAsB,SAAA,GAAyC;IAAzCtB,EAAA,CAAAkB,UAAA,iBAAAC,MAAA,CAAApB,gBAAA,CAAAyB,UAAA,CAAyC;;;ADD5D,OAAM,MAAOC,sBAAsB;EAOjCC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;IANlC,KAAAP,gBAAgB,GAAqBrB,gBAAgB,CAAC6B,MAAM;IACpD,KAAAC,kBAAkB,GAAwB,IAAI;IAEtD;IACA,KAAA9B,gBAAgB,GAAGA,gBAAgB;EAEmB;EAEtD+B,QAAQA,CAAA;IACN,IAAI,CAACD,kBAAkB,GAAG,IAAI,CAACF,cAAc,CAACI,OAAO,CAACC,SAAS,CAC7DC,MAAM,IAAI,IAAI,CAACb,gBAAgB,GAAGa,MAAM,CACzC;EACH;EAEAC,WAAWA,CAAA;IACT,IAAI,IAAI,CAACL,kBAAkB,EAAE;MAC3B,IAAI,CAACA,kBAAkB,CAACM,WAAW,EAAE;;EAEzC;EAEAlB,eAAeA,CAAA;IACb,IAAI,CAACU,cAAc,CAACV,eAAe,EAAE;EACvC;;;uBAvBWQ,sBAAsB,EAAAzB,EAAA,CAAAoC,iBAAA,CAAAC,EAAA,CAAAC,cAAA;IAAA;EAAA;;;YAAtBb,sBAAsB;MAAAc,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,gCAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCRnC7C,EAAA,CAAAM,UAAA,IAAAyC,qCAAA,iBAkBM;;;UAlBA/C,EAAA,CAAAkB,UAAA,SAAA4B,GAAA,CAAA1B,gBAAA,KAAA0B,GAAA,CAAA/C,gBAAA,CAAA6B,MAAA,CAAkD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}