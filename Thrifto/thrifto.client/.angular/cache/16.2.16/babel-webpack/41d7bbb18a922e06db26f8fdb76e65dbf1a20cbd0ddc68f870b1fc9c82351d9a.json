{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class PaginationService {\n  constructor() {\n    this.pageSubject = new BehaviorSubject(1);\n    this.pageSizeSubject = new BehaviorSubject(12); // Match your existing page size\n    this.totalCountSubject = new BehaviorSubject(0);\n    this.loadingSubject = new BehaviorSubject(false);\n    this.hasMoreSubject = new BehaviorSubject(true);\n  }\n  get page$() {\n    return this.pageSubject.asObservable();\n  }\n  get pageSize$() {\n    return this.pageSizeSubject.asObservable();\n  }\n  get totalCount$() {\n    return this.totalCountSubject.asObservable();\n  }\n  get loading$() {\n    return this.loadingSubject.asObservable();\n  }\n  get hasMore$() {\n    return this.hasMoreSubject.asObservable();\n  }\n  get currentPage() {\n    return this.pageSubject.value;\n  }\n  get currentPageSize() {\n    return this.pageSizeSubject.value;\n  }\n  get totalCount() {\n    return this.totalCountSubject.value;\n  }\n  get isLoading() {\n    return this.loadingSubject.value;\n  }\n  get hasMoreItems() {\n    return this.hasMoreSubject.value;\n  }\n  setPage(page) {\n    this.pageSubject.next(page);\n  }\n  setPageSize(pageSize) {\n    this.pageSizeSubject.next(pageSize);\n  }\n  setTotalCount(totalCount) {\n    this.totalCountSubject.next(totalCount);\n    // Update has more based on total count\n    this.updateHasMore();\n  }\n  setLoading(loading) {\n    this.loadingSubject.next(loading);\n  }\n  setHasMore(hasMore) {\n    this.hasMoreSubject.next(hasMore);\n  }\n  nextPage() {\n    if (this.hasMoreItems && !this.isLoading) {\n      this.setPage(this.currentPage + 1);\n    }\n  }\n  reset() {\n    this.setPage(1);\n    this.setTotalCount(0);\n    this.setLoading(false);\n    this.setHasMore(true);\n  }\n  updateHasMore() {\n    // If we have a total count, check if there are more items\n    if (this.totalCount > 0) {\n      const hasMore = this.currentPage * this.currentPageSize < this.totalCount;\n      this.setHasMore(hasMore);\n    }\n  }\n  static {\n    this.ɵfac = function PaginationService_Factory(t) {\n      return new (t || PaginationService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PaginationService,\n      factory: PaginationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","PaginationService","constructor","pageSubject","pageSizeSubject","totalCountSubject","loadingSubject","hasMoreSubject","page$","asObservable","pageSize$","totalCount$","loading$","hasMore$","currentPage","value","currentPageSize","totalCount","isLoading","hasMoreItems","setPage","page","next","setPageSize","pageSize","setTotalCount","updateHasMore","setLoading","loading","setHasMore","hasMore","nextPage","reset","factory","ɵfac","providedIn"],"sources":["C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\services\\pagination.service.ts"],"sourcesContent":["// src/app/services/pagination.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PaginationService {\r\n  private pageSubject = new BehaviorSubject<number>(1);\r\n  private pageSizeSubject = new BehaviorSubject<number>(12); // Match your existing page size\r\n  private totalCountSubject = new BehaviorSubject<number>(0);\r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n  private hasMoreSubject = new BehaviorSubject<boolean>(true);\r\n\r\n  constructor() { }\r\n\r\n  get page$(): Observable<number> {\r\n    return this.pageSubject.asObservable();\r\n  }\r\n\r\n  get pageSize$(): Observable<number> {\r\n    return this.pageSizeSubject.asObservable();\r\n  }\r\n\r\n  get totalCount$(): Observable<number> {\r\n    return this.totalCountSubject.asObservable();\r\n  }\r\n\r\n  get loading$(): Observable<boolean> {\r\n    return this.loadingSubject.asObservable();\r\n  }\r\n\r\n  get hasMore$(): Observable<boolean> {\r\n    return this.hasMoreSubject.asObservable();\r\n  }\r\n\r\n  get currentPage(): number {\r\n    return this.pageSubject.value;\r\n  }\r\n\r\n  get currentPageSize(): number {\r\n    return this.pageSizeSubject.value;\r\n  }\r\n\r\n  get totalCount(): number {\r\n    return this.totalCountSubject.value;\r\n  }\r\n\r\n  get isLoading(): boolean {\r\n    return this.loadingSubject.value;\r\n  }\r\n\r\n  get hasMoreItems(): boolean {\r\n    return this.hasMoreSubject.value;\r\n  }\r\n\r\n  setPage(page: number): void {\r\n    this.pageSubject.next(page);\r\n  }\r\n\r\n  setPageSize(pageSize: number): void {\r\n    this.pageSizeSubject.next(pageSize);\r\n  }\r\n\r\n  setTotalCount(totalCount: number): void {\r\n    this.totalCountSubject.next(totalCount);\r\n    // Update has more based on total count\r\n    this.updateHasMore();\r\n  }\r\n\r\n  setLoading(loading: boolean): void {\r\n    this.loadingSubject.next(loading);\r\n  }\r\n\r\n  setHasMore(hasMore: boolean): void {\r\n    this.hasMoreSubject.next(hasMore);\r\n  }\r\n\r\n  nextPage(): void {\r\n    if (this.hasMoreItems && !this.isLoading) {\r\n      this.setPage(this.currentPage + 1);\r\n    }\r\n  }\r\n\r\n  reset(): void {\r\n    this.setPage(1);\r\n    this.setTotalCount(0);\r\n    this.setLoading(false);\r\n    this.setHasMore(true);\r\n  }\r\n\r\n  private updateHasMore(): void {\r\n    // If we have a total count, check if there are more items\r\n    if (this.totalCount > 0) {\r\n      const hasMore = this.currentPage * this.currentPageSize < this.totalCount;\r\n      this.setHasMore(hasMore);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}