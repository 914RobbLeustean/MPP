{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/leust/source/repos/MPP-main/Thrifto/thrifto.client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { interval } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { Chart, registerables } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/listing.service\";\nimport * as i2 from \"../../services/signalr.service\";\nfunction DashboardComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 3);\n  }\n}\nfunction DashboardComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"div\", 5)(2, \"div\", 6)(3, \"h3\");\n    i0.ɵɵtext(4, \"Total Listings\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 7);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 6)(8, \"h3\");\n    i0.ɵɵtext(9, \"Average Price\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 7);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"div\", 6)(13, \"h3\");\n    i0.ɵɵtext(14, \"Highest Price\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"div\", 7);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(17, \"div\", 8)(18, \"div\", 9);\n    i0.ɵɵelement(19, \"canvas\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"div\", 9);\n    i0.ɵɵelement(21, \"canvas\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"div\", 12);\n    i0.ɵɵelement(23, \"canvas\", 13);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r1.totalListings);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\"$\", ctx_r1.averagePrice.toFixed(2), \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\"$\", ctx_r1.highestPrice.toFixed(2), \"\");\n  }\n}\nChart.register(...registerables);\nexport class DashboardComponent {\n  constructor(listingService, signalrService // Add SignalR service\n  ) {\n    this.listingService = listingService;\n    this.signalrService = signalrService;\n    this.isLoading = true;\n    this.signalrSubscription = null;\n    this.chartUpdateSubscription = null;\n    this.dataLoaded = false;\n    this.priceDistributionChart = null;\n    this.qualityDistributionChart = null;\n    this.listingsTimeChart = null;\n    this.priceData = {\n      labels: ['No Data'],\n      datasets: [{\n        label: 'Number of Listings',\n        data: [0],\n        backgroundColor: ['rgba(200, 200, 200, 0.2)'],\n        borderColor: ['rgba(200, 200, 200, 1)'],\n        borderWidth: 1\n      }]\n    };\n    this.qualityData = {\n      labels: ['No Data'],\n      datasets: [{\n        label: 'Number of Listings',\n        data: [0],\n        backgroundColor: ['rgba(200, 200, 200, 0.2)'],\n        borderColor: ['rgba(200, 200, 200, 1)'],\n        borderWidth: 1\n      }]\n    };\n    this.timeData = {\n      labels: ['No Data'],\n      datasets: [{\n        label: 'New Listings',\n        data: [0],\n        backgroundColor: 'rgba(168, 57, 57, 0.2)',\n        borderColor: 'rgba(168, 57, 57, 1)',\n        borderWidth: 1\n      }]\n    };\n    this.totalListings = 0;\n    this.averagePrice = 0;\n    this.highestPrice = 0;\n    this.updateSubscription = null;\n  }\n  ngOnInit() {\n    this.loadInitialData();\n    // Connect to SignalR\n    this.connectToSignalR();\n  }\n  connectToSignalR() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this.signalrService.startConnection();\n        _this.setupSignalRListeners();\n      } catch (error) {\n        console.error('Failed to connect to SignalR:', error);\n      }\n    })();\n  }\n  setupSignalRListeners() {\n    // Listen for new listings\n    this.signalrSubscription = this.signalrService.newListing$.subscribe(listing => {\n      if (listing) {\n        console.log('Received new listing via SignalR:', listing);\n        // You could update your listings array here if needed\n        // this.listings.unshift(listing);\n        // Optionally, you could refresh the data entirely\n        // this.loadInitialData();\n      }\n    });\n    // Listen for chart updates\n    this.chartUpdateSubscription = this.signalrService.chartUpdate$.subscribe(chartData => {\n      if (chartData) {\n        console.log('Received chart update via SignalR:', chartData);\n        this.updateChartsFromWebSocket(chartData);\n      }\n    });\n  }\n  ngAfterViewInit() {\n    setTimeout(() => {\n      if (this.dataLoaded) {\n        this.initializeCharts();\n        this.setupRealTimeUpdates();\n      }\n    }, 500);\n  }\n  ngOnDestroy() {\n    if (this.updateSubscription) {\n      this.updateSubscription.unsubscribe();\n    }\n    if (this.signalrSubscription) {\n      this.signalrSubscription.unsubscribe();\n    }\n    if (this.chartUpdateSubscription) {\n      this.chartUpdateSubscription.unsubscribe();\n    }\n    if (this.priceDistributionChart) {\n      this.priceDistributionChart.destroy();\n    }\n    if (this.qualityDistributionChart) {\n      this.qualityDistributionChart.destroy();\n    }\n    if (this.listingsTimeChart) {\n      this.listingsTimeChart.destroy();\n    }\n    this.signalrService.stopConnection();\n  }\n  // Use the real-time updates from SignalR instead of polling\n  setupRealTimeUpdates() {\n    // We could keep the polling as a fallback, but at a much lower frequency\n    this.updateSubscription = interval(60000).pipe(\n    // Update every minute instead of every 10 seconds\n    switchMap(() => this.listingService.getListings({\n      pageSize: 50\n    }))).subscribe({\n      next: response => {\n        if (response.items && response.items.length > 0) {\n          this.updateChartData(response.items);\n        }\n      },\n      error: error => {\n        console.error('Error updating dashboard data', error);\n      }\n    });\n  }\n  updateChartsFromWebSocket(chartData) {\n    if (!this.priceDistributionChart || !this.qualityDistributionChart || !this.listingsTimeChart) {\n      console.log('Charts not initialized yet, skipping update');\n      return;\n    }\n    try {\n      // Update price distribution chart\n      if (chartData.priceData) {\n        this.priceDistributionChart.data.labels = chartData.priceData.labels;\n        this.priceDistributionChart.data.datasets[0].data = chartData.priceData.datasets[0].data;\n        this.priceDistributionChart.update();\n      }\n      // Update quality distribution chart\n      if (chartData.qualityData) {\n        this.qualityDistributionChart.data.labels = chartData.qualityData.labels;\n        this.qualityDistributionChart.data.datasets[0].data = chartData.qualityData.datasets[0].data;\n        this.qualityDistributionChart.update();\n      }\n      // Update time series chart\n      if (chartData.timeData) {\n        this.listingsTimeChart.data.labels = chartData.timeData.labels;\n        this.listingsTimeChart.data.datasets[0].data = chartData.timeData.datasets[0].data;\n        this.listingsTimeChart.update();\n      }\n      // Update statistics\n      if (chartData.totalListings !== undefined) {\n        this.totalListings = chartData.totalListings;\n      }\n      if (chartData.averagePrice !== undefined) {\n        this.averagePrice = chartData.averagePrice;\n      }\n      if (chartData.highestPrice !== undefined) {\n        this.highestPrice = chartData.highestPrice;\n      }\n    } catch (error) {\n      console.error('Error updating charts from WebSocket:', error);\n    }\n  }\n  loadInitialData() {\n    this.isLoading = true;\n    this.listingService.getListings({\n      pageSize: 50\n    }).subscribe({\n      next: response => {\n        if (response.items && response.items.length > 0) {\n          this.processInitialData(response.items);\n        }\n        this.isLoading = false;\n        this.dataLoaded = true;\n        setTimeout(() => {\n          this.initializeCharts();\n          this.setupRealTimeUpdates();\n        }, 500);\n      },\n      error: error => {\n        console.error('Error loading dashboard data', error);\n        this.isLoading = false;\n        this.dataLoaded = true;\n        setTimeout(() => {\n          this.initializeCharts();\n        }, 500);\n      }\n    });\n  }\n  processInitialData(listings) {\n    this.totalListings = listings.length;\n    this.averagePrice = listings.reduce((sum, item) => sum + item.price, 0) / listings.length;\n    this.highestPrice = Math.max(...listings.map(item => item.price));\n    const priceBuckets = {\n      '0-50': 0,\n      '50-100': 0,\n      '100-200': 0,\n      '200-500': 0,\n      '500+': 0\n    };\n    listings.forEach(listing => {\n      const price = listing.price;\n      if (price <= 50) priceBuckets['0-50']++;else if (price <= 100) priceBuckets['50-100']++;else if (price <= 200) priceBuckets['100-200']++;else if (price <= 500) priceBuckets['200-500']++;else priceBuckets['500+']++;\n    });\n    this.priceData = {\n      labels: Object.keys(priceBuckets),\n      datasets: [{\n        label: 'Number of Listings',\n        data: Object.values(priceBuckets),\n        backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)'],\n        borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)'],\n        borderWidth: 1\n      }]\n    };\n    const qualityCounts = {};\n    listings.forEach(listing => {\n      const quality = listing.quality;\n      if (quality) {\n        qualityCounts[quality] = (qualityCounts[quality] || 0) + 1;\n      }\n    });\n    if (Object.keys(qualityCounts).length > 0) {\n      this.qualityData = {\n        labels: Object.keys(qualityCounts),\n        datasets: [{\n          label: 'Number of Listings',\n          data: Object.values(qualityCounts),\n          backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)'],\n          borderWidth: 1\n        }]\n      };\n    }\n    const dates = {};\n    listings.forEach(listing => {\n      if (listing.createdAt) {\n        const date = new Date(listing.createdAt).toLocaleDateString();\n        dates[date] = (dates[date] || 0) + 1;\n      }\n    });\n    if (Object.keys(dates).length > 0) {\n      this.timeData = {\n        labels: Object.keys(dates),\n        datasets: [{\n          label: 'New Listings',\n          data: Object.values(dates),\n          backgroundColor: 'rgba(168, 57, 57, 0.2)',\n          borderColor: 'rgba(168, 57, 57, 1)',\n          borderWidth: 1,\n          tension: 0.1\n        }]\n      };\n    }\n  }\n  initializeCharts() {\n    try {\n      const priceChartElement = document.getElementById('priceChart');\n      const qualityChartElement = document.getElementById('qualityChart');\n      const timeChartElement = document.getElementById('timeChart');\n      if (priceChartElement) {\n        this.priceDistributionChart = new Chart(priceChartElement, {\n          type: 'bar',\n          data: this.priceData,\n          options: {\n            responsive: true,\n            plugins: {\n              title: {\n                display: true,\n                text: 'Price Distribution'\n              }\n            }\n          }\n        });\n      }\n      if (qualityChartElement) {\n        this.qualityDistributionChart = new Chart(qualityChartElement, {\n          type: 'pie',\n          data: this.qualityData,\n          options: {\n            responsive: true,\n            plugins: {\n              title: {\n                display: true,\n                text: 'Quality Distribution'\n              }\n            }\n          }\n        });\n      }\n      if (timeChartElement) {\n        this.listingsTimeChart = new Chart(timeChartElement, {\n          type: 'line',\n          data: this.timeData,\n          options: {\n            responsive: true,\n            plugins: {\n              title: {\n                display: true,\n                text: 'Listings Over Time'\n              }\n            }\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error initializing charts:', error);\n    }\n  }\n  updateChartData(listings) {\n    if (!this.priceDistributionChart || !this.qualityDistributionChart || !this.listingsTimeChart) {\n      console.log('Charts not initialized yet, skipping update');\n      return;\n    }\n    try {\n      const priceBuckets = {\n        '0-50': 0,\n        '50-100': 0,\n        '100-200': 0,\n        '200-500': 0,\n        '500+': 0\n      };\n      listings.forEach(listing => {\n        const price = listing.price;\n        if (price <= 50) priceBuckets['0-50']++;else if (price <= 100) priceBuckets['50-100']++;else if (price <= 200) priceBuckets['100-200']++;else if (price <= 500) priceBuckets['200-500']++;else priceBuckets['500+']++;\n      });\n      this.priceDistributionChart.data.datasets[0].data = Object.values(priceBuckets);\n      this.priceDistributionChart.update();\n      const qualityCounts = {};\n      listings.forEach(listing => {\n        const quality = listing.quality;\n        if (quality) {\n          qualityCounts[quality] = (qualityCounts[quality] || 0) + 1;\n        }\n      });\n      if (Object.keys(qualityCounts).length > 0) {\n        this.qualityDistributionChart.data.labels = Object.keys(qualityCounts);\n        this.qualityDistributionChart.data.datasets[0].data = Object.values(qualityCounts);\n        this.qualityDistributionChart.update();\n      }\n      const dates = {};\n      listings.forEach(listing => {\n        if (listing.createdAt) {\n          const date = new Date(listing.createdAt).toLocaleDateString();\n          dates[date] = (dates[date] || 0) + 1;\n        }\n      });\n      if (Object.keys(dates).length > 0) {\n        this.listingsTimeChart.data.labels = Object.keys(dates);\n        this.listingsTimeChart.data.datasets[0].data = Object.values(dates);\n        this.listingsTimeChart.update();\n      }\n      this.totalListings = listings.length;\n      this.averagePrice = listings.reduce((sum, item) => sum + item.price, 0) / listings.length;\n      this.highestPrice = Math.max(...listings.map(item => item.price));\n    } catch (error) {\n      console.error('Error updating charts:', error);\n    }\n  }\n  static {\n    this.ɵfac = function DashboardComponent_Factory(t) {\n      return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.ListingService), i0.ɵɵdirectiveInject(i2.SignalrService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      decls: 5,\n      vars: 2,\n      consts: [[1, \"container\"], [\"class\", \"loading-spinner\", 4, \"ngIf\"], [\"class\", \"dashboard-content\", 4, \"ngIf\"], [1, \"loading-spinner\"], [1, \"dashboard-content\"], [1, \"stats-container\"], [1, \"stat-card\"], [1, \"stat-value\"], [1, \"charts-container\"], [1, \"chart-wrapper\"], [\"id\", \"priceChart\"], [\"id\", \"qualityChart\"], [1, \"chart-wrapper\", \"wide\"], [\"id\", \"timeChart\"]],\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n          i0.ɵɵtext(2, \"Thrifto Dashboard\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(3, DashboardComponent_div_3_Template, 1, 0, \"div\", 1);\n          i0.ɵɵtemplate(4, DashboardComponent_div_4_Template, 24, 3, \"div\", 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n        }\n      },\n      styles: [\"\\n\\n.container[_ngcontent-%COMP%] {\\n  max-width: 1200px;\\n  margin: 0 auto;\\n  padding: 40px 20px;\\n}\\n\\nh1[_ngcontent-%COMP%] {\\n  margin-bottom: 30px;\\n  color: #333;\\n}\\n\\n.loading-spinner[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  padding: 40px 0;\\n}\\n.loading-spinner[_ngcontent-%COMP%]:after {\\n  content: \\\"\\\";\\n  width: 40px;\\n  height: 40px;\\n  border: 4px solid #f3f3f3;\\n  border-top: 4px solid #a83939;\\n  border-radius: 50%;\\n  animation: _ngcontent-%COMP%_spin 1s linear infinite;\\n}\\n\\n.charts-container[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-columns: repeat(2, 1fr);\\n  gap: 30px;\\n}\\n.charts-container[_ngcontent-%COMP%]   .chart-wrapper[_ngcontent-%COMP%] {\\n  background-color: white;\\n  border-radius: 8px;\\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\\n  padding: 20px;\\n}\\n.charts-container[_ngcontent-%COMP%]   .chart-wrapper.wide[_ngcontent-%COMP%] {\\n  grid-column: span 2;\\n}\\n\\n\\n\\n.dashboard-content[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 30px;\\n}\\n\\n.stats-container[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-columns: repeat(3, 1fr);\\n  gap: 20px;\\n}\\n\\n.stat-card[_ngcontent-%COMP%] {\\n  background-color: white;\\n  border-radius: 8px;\\n  padding: 20px;\\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\\n  text-align: center;\\n}\\n.stat-card[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\\n  font-size: 16px;\\n  color: #666;\\n  margin-bottom: 10px;\\n}\\n.stat-card[_ngcontent-%COMP%]   .stat-value[_ngcontent-%COMP%] {\\n  font-size: 28px;\\n  font-weight: bold;\\n  color: #a83939;\\n}\\n\\n@keyframes _ngcontent-%COMP%_spin {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n@media (max-width: 768px) {\\n  .charts-container[_ngcontent-%COMP%] {\\n    grid-template-columns: 1fr;\\n  }\\n  .charts-container[_ngcontent-%COMP%]   .chart-wrapper.wide[_ngcontent-%COMP%] {\\n    grid-column: span 1;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBEQUFBO0FBQ0E7RUFDRSxpQkFBQTtFQUNBLGNBQUE7RUFDQSxrQkFBQTtBQUNGOztBQUVBO0VBQ0UsbUJBQUE7RUFDQSxXQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxlQUFBO0FBQ0Y7QUFDRTtFQUNFLFdBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLHlCQUFBO0VBQ0EsNkJBQUE7RUFDQSxrQkFBQTtFQUNBLGtDQUFBO0FBQ0o7O0FBR0E7RUFDRSxhQUFBO0VBQ0EscUNBQUE7RUFDQSxTQUFBO0FBQUY7QUFFRTtFQUNFLHVCQUFBO0VBQ0Esa0JBQUE7RUFDQSx5Q0FBQTtFQUNBLGFBQUE7QUFBSjtBQUVJO0VBQ0UsbUJBQUE7QUFBTjs7QUFLQSx5Q0FBQTtBQUNBO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsU0FBQTtBQUZGOztBQUtBO0VBQ0UsYUFBQTtFQUNBLHFDQUFBO0VBQ0EsU0FBQTtBQUZGOztBQUtBO0VBQ0UsdUJBQUE7RUFDQSxrQkFBQTtFQUNBLGFBQUE7RUFDQSx5Q0FBQTtFQUNBLGtCQUFBO0FBRkY7QUFJRTtFQUNFLGVBQUE7RUFDQSxXQUFBO0VBQ0EsbUJBQUE7QUFGSjtBQUtFO0VBQ0UsZUFBQTtFQUNBLGlCQUFBO0VBQ0EsY0FBQTtBQUhKOztBQU9BO0VBQ0U7SUFDRSx1QkFBQTtFQUpGO0VBT0E7SUFDRSx5QkFBQTtFQUxGO0FBQ0Y7QUFRQTtFQUNFO0lBQ0UsMEJBQUE7RUFORjtFQVFFO0lBQ0UsbUJBQUE7RUFOSjtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyogc3JjL2FwcC9jb21wb25lbnRzL2Rhc2hib2FyZC9kYXNoYm9hcmQuY29tcG9uZW50LnNjc3MgKi9cclxuLmNvbnRhaW5lciB7XHJcbiAgbWF4LXdpZHRoOiAxMjAwcHg7XHJcbiAgbWFyZ2luOiAwIGF1dG87XHJcbiAgcGFkZGluZzogNDBweCAyMHB4O1xyXG59XHJcblxyXG5oMSB7XHJcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuICBjb2xvcjogIzMzMztcclxufVxyXG5cclxuLmxvYWRpbmctc3Bpbm5lciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBwYWRkaW5nOiA0MHB4IDA7XHJcblxyXG4gICY6YWZ0ZXIge1xyXG4gICAgY29udGVudDogJyc7XHJcbiAgICB3aWR0aDogNDBweDtcclxuICAgIGhlaWdodDogNDBweDtcclxuICAgIGJvcmRlcjogNHB4IHNvbGlkICNmM2YzZjM7XHJcbiAgICBib3JkZXItdG9wOiA0cHggc29saWQgI2E4MzkzOTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIGFuaW1hdGlvbjogc3BpbiAxcyBsaW5lYXIgaW5maW5pdGU7XHJcbiAgfVxyXG59XHJcblxyXG4uY2hhcnRzLWNvbnRhaW5lciB7XHJcbiAgZGlzcGxheTogZ3JpZDtcclxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLCAxZnIpO1xyXG4gIGdhcDogMzBweDtcclxuXHJcbiAgLmNoYXJ0LXdyYXBwZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XHJcbiAgICBib3gtc2hhZG93OiAwIDJweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcclxuICAgIHBhZGRpbmc6IDIwcHg7XHJcblxyXG4gICAgJi53aWRlIHtcclxuICAgICAgZ3JpZC1jb2x1bW46IHNwYW4gMjtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8qIEFkZCB0aGlzIHRvIGRhc2hib2FyZC5jb21wb25lbnQuc2NzcyAqL1xyXG4uZGFzaGJvYXJkLWNvbnRlbnQge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBnYXA6IDMwcHg7XHJcbn1cclxuXHJcbi5zdGF0cy1jb250YWluZXIge1xyXG4gIGRpc3BsYXk6IGdyaWQ7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgMWZyKTtcclxuICBnYXA6IDIwcHg7XHJcbn1cclxuXHJcbi5zdGF0LWNhcmQge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcclxuICBwYWRkaW5nOiAyMHB4O1xyXG4gIGJveC1zaGFkb3c6IDAgMnB4IDEwcHggcmdiYSgwLDAsMCwwLjEpO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuXHJcbiAgaDMge1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgY29sb3I6ICM2NjY7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gIH1cclxuXHJcbiAgLnN0YXQtdmFsdWUge1xyXG4gICAgZm9udC1zaXplOiAyOHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBjb2xvcjogI2E4MzkzOTtcclxuICB9XHJcbn1cclxuXHJcbkBrZXlmcmFtZXMgc3BpbiB7XHJcbiAgMCUge1xyXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbiAgfVxyXG5cclxuICAxMDAlIHtcclxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XHJcbiAgfVxyXG59XHJcblxyXG5AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAuY2hhcnRzLWNvbnRhaW5lciB7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcclxuXHJcbiAgICAuY2hhcnQtd3JhcHBlci53aWRlIHtcclxuICAgICAgZ3JpZC1jb2x1bW46IHNwYW4gMTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["interval","switchMap","Chart","registerables","i0","ɵɵelement","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r1","totalListings","ɵɵtextInterpolate1","averagePrice","toFixed","highestPrice","register","DashboardComponent","constructor","listingService","signalrService","isLoading","signalrSubscription","chartUpdateSubscription","dataLoaded","priceDistributionChart","qualityDistributionChart","listingsTimeChart","priceData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","qualityData","timeData","updateSubscription","ngOnInit","loadInitialData","connectToSignalR","_this","_asyncToGenerator","startConnection","setupSignalRListeners","error","console","newListing$","subscribe","listing","log","chartUpdate$","chartData","updateChartsFromWebSocket","ngAfterViewInit","setTimeout","initializeCharts","setupRealTimeUpdates","ngOnDestroy","unsubscribe","destroy","stopConnection","pipe","getListings","pageSize","next","response","items","length","updateChartData","update","undefined","processInitialData","listings","reduce","sum","item","price","Math","max","map","priceBuckets","forEach","Object","keys","values","qualityCounts","quality","dates","createdAt","date","Date","toLocaleDateString","tension","priceChartElement","document","getElementById","qualityChartElement","timeChartElement","type","options","responsive","plugins","title","display","text","ɵɵdirectiveInject","i1","ListingService","i2","SignalrService","selectors","decls","vars","consts","template","DashboardComponent_Template","rf","ctx","ɵɵtemplate","DashboardComponent_div_3_Template","DashboardComponent_div_4_Template","ɵɵproperty"],"sources":["C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\components\\dashboard\\dashboard.component.ts","C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\components\\dashboard\\dashboard.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy, AfterViewInit } from '@angular/core';\r\nimport { ListingService } from '../../services/listing.service';\r\nimport { interval, Subscription } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { SignalrService } from '../../services/signalr.service';\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\nChart.register(...registerables);\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  isLoading = true;\r\n  private signalrSubscription: Subscription | null = null;\r\n  private chartUpdateSubscription: Subscription | null = null;\r\n  dataLoaded = false;\r\n  priceDistributionChart: any = null;\r\n  qualityDistributionChart: any = null;\r\n  listingsTimeChart: any = null;\r\n  priceData: any = {\r\n    labels: ['No Data'],\r\n    datasets: [{\r\n      label: 'Number of Listings',\r\n      data: [0],\r\n      backgroundColor: ['rgba(200, 200, 200, 0.2)'],\r\n      borderColor: ['rgba(200, 200, 200, 1)'],\r\n      borderWidth: 1\r\n    }]\r\n  };\r\n  qualityData: any = {\r\n    labels: ['No Data'],\r\n    datasets: [{\r\n      label: 'Number of Listings',\r\n      data: [0],\r\n      backgroundColor: ['rgba(200, 200, 200, 0.2)'],\r\n      borderColor: ['rgba(200, 200, 200, 1)'],\r\n      borderWidth: 1\r\n    }]\r\n  };\r\n  timeData: any = {\r\n    labels: ['No Data'],\r\n    datasets: [{\r\n      label: 'New Listings',\r\n      data: [0],\r\n      backgroundColor: 'rgba(168, 57, 57, 0.2)',\r\n      borderColor: 'rgba(168, 57, 57, 1)',\r\n      borderWidth: 1\r\n    }]\r\n  };\r\n  totalListings = 0;\r\n  averagePrice = 0;\r\n  highestPrice = 0;\r\n  private updateSubscription: Subscription | null = null;\r\n\r\n  constructor(\r\n    private listingService: ListingService,\r\n    private signalrService: SignalrService // Add SignalR service\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadInitialData();\r\n\r\n    // Connect to SignalR\r\n    this.connectToSignalR();\r\n  }\r\n\r\n  private async connectToSignalR(): Promise<void> {\r\n    try {\r\n      await this.signalrService.startConnection();\r\n      this.setupSignalRListeners();\r\n    } catch (error) {\r\n      console.error('Failed to connect to SignalR:', error);\r\n    }\r\n  }\r\n\r\n  private setupSignalRListeners(): void {\r\n    // Listen for new listings\r\n    this.signalrSubscription = this.signalrService.newListing$.subscribe(listing => {\r\n      if (listing) {\r\n        console.log('Received new listing via SignalR:', listing);\r\n\r\n        // You could update your listings array here if needed\r\n        // this.listings.unshift(listing);\r\n\r\n        // Optionally, you could refresh the data entirely\r\n        // this.loadInitialData();\r\n      }\r\n    });\r\n\r\n    // Listen for chart updates\r\n    this.chartUpdateSubscription = this.signalrService.chartUpdate$.subscribe(chartData => {\r\n      if (chartData) {\r\n        console.log('Received chart update via SignalR:', chartData);\r\n        this.updateChartsFromWebSocket(chartData);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(() => {\r\n      if (this.dataLoaded) {\r\n        this.initializeCharts();\r\n        this.setupRealTimeUpdates();\r\n      }\r\n    }, 500);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.updateSubscription) {\r\n      this.updateSubscription.unsubscribe();\r\n    }\r\n    if (this.signalrSubscription) {\r\n      this.signalrSubscription.unsubscribe();\r\n    }\r\n    if (this.chartUpdateSubscription) {\r\n      this.chartUpdateSubscription.unsubscribe();\r\n    }\r\n    if (this.priceDistributionChart) {\r\n      this.priceDistributionChart.destroy();\r\n    }\r\n    if (this.qualityDistributionChart) {\r\n      this.qualityDistributionChart.destroy();\r\n    }\r\n    if (this.listingsTimeChart) {\r\n      this.listingsTimeChart.destroy();\r\n    }\r\n    this.signalrService.stopConnection();\r\n  }\r\n\r\n  // Use the real-time updates from SignalR instead of polling\r\n  setupRealTimeUpdates(): void {\r\n    // We could keep the polling as a fallback, but at a much lower frequency\r\n    this.updateSubscription = interval(60000).pipe( // Update every minute instead of every 10 seconds\r\n      switchMap(() => this.listingService.getListings({ pageSize: 50 }))\r\n    ).subscribe({\r\n      next: (response) => {\r\n        if (response.items && response.items.length > 0) {\r\n          this.updateChartData(response.items);\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.error('Error updating dashboard data', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  updateChartsFromWebSocket(chartData: any): void {\r\n    if (!this.priceDistributionChart || !this.qualityDistributionChart || !this.listingsTimeChart) {\r\n      console.log('Charts not initialized yet, skipping update');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Update price distribution chart\r\n      if (chartData.priceData) {\r\n        this.priceDistributionChart.data.labels = chartData.priceData.labels;\r\n        this.priceDistributionChart.data.datasets[0].data = chartData.priceData.datasets[0].data;\r\n        this.priceDistributionChart.update();\r\n      }\r\n\r\n      // Update quality distribution chart\r\n      if (chartData.qualityData) {\r\n        this.qualityDistributionChart.data.labels = chartData.qualityData.labels;\r\n        this.qualityDistributionChart.data.datasets[0].data = chartData.qualityData.datasets[0].data;\r\n        this.qualityDistributionChart.update();\r\n      }\r\n\r\n      // Update time series chart\r\n      if (chartData.timeData) {\r\n        this.listingsTimeChart.data.labels = chartData.timeData.labels;\r\n        this.listingsTimeChart.data.datasets[0].data = chartData.timeData.datasets[0].data;\r\n        this.listingsTimeChart.update();\r\n      }\r\n\r\n      // Update statistics\r\n      if (chartData.totalListings !== undefined) {\r\n        this.totalListings = chartData.totalListings;\r\n      }\r\n\r\n      if (chartData.averagePrice !== undefined) {\r\n        this.averagePrice = chartData.averagePrice;\r\n      }\r\n\r\n      if (chartData.highestPrice !== undefined) {\r\n        this.highestPrice = chartData.highestPrice;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating charts from WebSocket:', error);\r\n    }\r\n  }\r\n\r\n  loadInitialData(): void {\r\n    this.isLoading = true;\r\n    this.listingService.getListings({ pageSize: 50 }).subscribe({\r\n      next: (response) => {\r\n        if (response.items && response.items.length > 0) {\r\n          this.processInitialData(response.items);\r\n        }\r\n        this.isLoading = false;\r\n        this.dataLoaded = true;\r\n        setTimeout(() => {\r\n          this.initializeCharts();\r\n          this.setupRealTimeUpdates();\r\n        }, 500);\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading dashboard data', error);\r\n        this.isLoading = false;\r\n        this.dataLoaded = true;\r\n        setTimeout(() => {\r\n          this.initializeCharts();\r\n        }, 500);\r\n      }\r\n    });\r\n  }\r\n\r\n  processInitialData(listings: any[]): void {\r\n    this.totalListings = listings.length;\r\n    this.averagePrice = listings.reduce((sum, item) => sum + item.price, 0) / listings.length;\r\n    this.highestPrice = Math.max(...listings.map(item => item.price));\r\n\r\n    const priceBuckets: { [key: string]: number } = {\r\n      '0-50': 0,\r\n      '50-100': 0,\r\n      '100-200': 0,\r\n      '200-500': 0,\r\n      '500+': 0\r\n    };\r\n\r\n    listings.forEach(listing => {\r\n      const price = listing.price;\r\n      if (price <= 50) priceBuckets['0-50']++;\r\n      else if (price <= 100) priceBuckets['50-100']++;\r\n      else if (price <= 200) priceBuckets['100-200']++;\r\n      else if (price <= 500) priceBuckets['200-500']++;\r\n      else priceBuckets['500+']++;\r\n    });\r\n\r\n    this.priceData = {\r\n      labels: Object.keys(priceBuckets),\r\n      datasets: [{\r\n        label: 'Number of Listings',\r\n        data: Object.values(priceBuckets),\r\n        backgroundColor: [\r\n          'rgba(255, 99, 132, 0.2)',\r\n          'rgba(54, 162, 235, 0.2)',\r\n          'rgba(255, 206, 86, 0.2)',\r\n          'rgba(75, 192, 192, 0.2)',\r\n          'rgba(153, 102, 255, 0.2)'\r\n        ],\r\n        borderColor: [\r\n          'rgba(255, 99, 132, 1)',\r\n          'rgba(54, 162, 235, 1)',\r\n          'rgba(255, 206, 86, 1)',\r\n          'rgba(75, 192, 192, 1)',\r\n          'rgba(153, 102, 255, 1)'\r\n        ],\r\n        borderWidth: 1\r\n      }]\r\n    };\r\n\r\n    const qualityCounts: { [key: string]: number } = {};\r\n    listings.forEach(listing => {\r\n      const quality = listing.quality;\r\n      if (quality) {\r\n        qualityCounts[quality] = (qualityCounts[quality] || 0) + 1;\r\n      }\r\n    });\r\n\r\n    if (Object.keys(qualityCounts).length > 0) {\r\n      this.qualityData = {\r\n        labels: Object.keys(qualityCounts),\r\n        datasets: [{\r\n          label: 'Number of Listings',\r\n          data: Object.values(qualityCounts),\r\n          backgroundColor: [\r\n            'rgba(255, 99, 132, 0.2)',\r\n            'rgba(54, 162, 235, 0.2)',\r\n            'rgba(255, 206, 86, 0.2)',\r\n            'rgba(75, 192, 192, 0.2)'\r\n          ],\r\n          borderColor: [\r\n            'rgba(255, 99, 132, 1)',\r\n            'rgba(54, 162, 235, 1)',\r\n            'rgba(255, 206, 86, 1)',\r\n            'rgba(75, 192, 192, 1)'\r\n          ],\r\n          borderWidth: 1\r\n        }]\r\n      };\r\n    }\r\n\r\n    const dates: { [key: string]: number } = {};\r\n    listings.forEach(listing => {\r\n      if (listing.createdAt) {\r\n        const date = new Date(listing.createdAt).toLocaleDateString();\r\n        dates[date] = (dates[date] || 0) + 1;\r\n      }\r\n    });\r\n\r\n    if (Object.keys(dates).length > 0) {\r\n      this.timeData = {\r\n        labels: Object.keys(dates),\r\n        datasets: [{\r\n          label: 'New Listings',\r\n          data: Object.values(dates),\r\n          backgroundColor: 'rgba(168, 57, 57, 0.2)',\r\n          borderColor: 'rgba(168, 57, 57, 1)',\r\n          borderWidth: 1,\r\n          tension: 0.1\r\n        }]\r\n      };\r\n    }\r\n  }\r\n\r\n  initializeCharts(): void {\r\n    try {\r\n      const priceChartElement = document.getElementById('priceChart') as HTMLCanvasElement;\r\n      const qualityChartElement = document.getElementById('qualityChart') as HTMLCanvasElement;\r\n      const timeChartElement = document.getElementById('timeChart') as HTMLCanvasElement;\r\n\r\n      if (priceChartElement) {\r\n        this.priceDistributionChart = new Chart(priceChartElement, {\r\n          type: 'bar',\r\n          data: this.priceData,\r\n          options: {\r\n            responsive: true,\r\n            plugins: {\r\n              title: {\r\n                display: true,\r\n                text: 'Price Distribution'\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (qualityChartElement) {\r\n        this.qualityDistributionChart = new Chart(qualityChartElement, {\r\n          type: 'pie',\r\n          data: this.qualityData,\r\n          options: {\r\n            responsive: true,\r\n            plugins: {\r\n              title: {\r\n                display: true,\r\n                text: 'Quality Distribution'\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (timeChartElement) {\r\n        this.listingsTimeChart = new Chart(timeChartElement, {\r\n          type: 'line',\r\n          data: this.timeData,\r\n          options: {\r\n            responsive: true,\r\n            plugins: {\r\n              title: {\r\n                display: true,\r\n                text: 'Listings Over Time'\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error initializing charts:', error);\r\n    }\r\n  }\r\n\r\n  updateChartData(listings: any[]): void {\r\n    if (!this.priceDistributionChart || !this.qualityDistributionChart || !this.listingsTimeChart) {\r\n      console.log('Charts not initialized yet, skipping update');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const priceBuckets = {\r\n        '0-50': 0,\r\n        '50-100': 0,\r\n        '100-200': 0,\r\n        '200-500': 0,\r\n        '500+': 0\r\n      };\r\n\r\n      listings.forEach(listing => {\r\n        const price = listing.price;\r\n        if (price <= 50) priceBuckets['0-50']++;\r\n        else if (price <= 100) priceBuckets['50-100']++;\r\n        else if (price <= 200) priceBuckets['100-200']++;\r\n        else if (price <= 500) priceBuckets['200-500']++;\r\n        else priceBuckets['500+']++;\r\n      });\r\n\r\n      this.priceDistributionChart.data.datasets[0].data = Object.values(priceBuckets);\r\n      this.priceDistributionChart.update();\r\n\r\n      const qualityCounts: { [key: string]: number } = {};\r\n      listings.forEach(listing => {\r\n        const quality = listing.quality;\r\n        if (quality) {\r\n          qualityCounts[quality] = (qualityCounts[quality] || 0) + 1;\r\n        }\r\n      });\r\n\r\n      if (Object.keys(qualityCounts).length > 0) {\r\n        this.qualityDistributionChart.data.labels = Object.keys(qualityCounts);\r\n        this.qualityDistributionChart.data.datasets[0].data = Object.values(qualityCounts);\r\n        this.qualityDistributionChart.update();\r\n      }\r\n\r\n      const dates: { [key: string]: number } = {};\r\n      listings.forEach(listing => {\r\n        if (listing.createdAt) {\r\n          const date = new Date(listing.createdAt).toLocaleDateString();\r\n          dates[date] = (dates[date] || 0) + 1;\r\n        }\r\n      });\r\n\r\n      if (Object.keys(dates).length > 0) {\r\n        this.listingsTimeChart.data.labels = Object.keys(dates);\r\n        this.listingsTimeChart.data.datasets[0].data = Object.values(dates);\r\n        this.listingsTimeChart.update();\r\n      }\r\n\r\n      this.totalListings = listings.length;\r\n      this.averagePrice = listings.reduce((sum, item) => sum + item.price, 0) / listings.length;\r\n      this.highestPrice = Math.max(...listings.map(item => item.price));\r\n\r\n    } catch (error) {\r\n      console.error('Error updating charts:', error);\r\n    }\r\n  }\r\n}\r\n","<!-- src/app/components/dashboard/dashboard.component.html -->\r\n<div class=\"container\">\r\n  <h1>Thrifto Dashboard</h1>\r\n\r\n  <div class=\"loading-spinner\" *ngIf=\"isLoading\"></div>\r\n\r\n  <div *ngIf=\"!isLoading\" class=\"dashboard-content\">\r\n    <!-- Basic Statistics -->\r\n    <div class=\"stats-container\">\r\n      <div class=\"stat-card\">\r\n        <h3>Total Listings</h3>\r\n        <div class=\"stat-value\">{{totalListings}}</div>\r\n      </div>\r\n\r\n      <div class=\"stat-card\">\r\n        <h3>Average Price</h3>\r\n        <div class=\"stat-value\">${{averagePrice.toFixed(2)}}</div>\r\n      </div>\r\n\r\n      <div class=\"stat-card\">\r\n        <h3>Highest Price</h3>\r\n        <div class=\"stat-value\">${{highestPrice.toFixed(2)}}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Charts -->\r\n    <div class=\"charts-container\">\r\n      <div class=\"chart-wrapper\">\r\n        <canvas id=\"priceChart\"></canvas>\r\n      </div>\r\n\r\n      <div class=\"chart-wrapper\">\r\n        <canvas id=\"qualityChart\"></canvas>\r\n      </div>\r\n\r\n      <div class=\"chart-wrapper wide\">\r\n        <canvas id=\"timeChart\"></canvas>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}