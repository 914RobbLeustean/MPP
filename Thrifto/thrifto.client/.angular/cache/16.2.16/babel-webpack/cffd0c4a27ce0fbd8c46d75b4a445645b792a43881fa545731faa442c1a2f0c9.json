{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class ChatService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = `${environment.apiUrl}/chat`;\n    this.hubConnection = null;\n    this.messageReceived = new Subject();\n    this.authService.currentUser$.subscribe(user => {\n      if (user) {\n        this.connectToHub();\n      } else if (this.hubConnection) {\n        this.hubConnection.close();\n        this.hubConnection = null;\n      }\n    });\n  }\n  onMessageReceived() {\n    return this.messageReceived.asObservable();\n  }\n  connectToHub() {\n    const token = this.authService.getToken();\n    if (!token) return;\n    this.hubConnection = new WebSocket(`${environment.wsUrl}?access_token=${token}`);\n    this.hubConnection.onopen = () => {\n      console.log('WebSocket connection established');\n    };\n    this.hubConnection.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'ReceiveMessage') {\n        this.messageReceived.next(data.message);\n      }\n    };\n    this.hubConnection.onclose = () => {\n      console.log('WebSocket connection closed');\n      // Try to reconnect after a delay\n      setTimeout(() => this.connectToHub(), 5000);\n    };\n    this.hubConnection.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  getConversations() {\n    return this.http.get(`${this.apiUrl}/conversations`);\n  }\n  getMessages(userId) {\n    return this.http.get(`${this.apiUrl}/messages/${userId}`);\n  }\n  sendMessage(receiverId, content) {\n    return this.http.post(`${this.apiUrl}/messages`, {\n      receiverId,\n      content\n    });\n  }\n  markAsRead(userId) {\n    return this.http.put(`${this.apiUrl}/read/${userId}`, {});\n  }\n  sendMessageViaSocket(receiverId, content) {\n    if (this.hubConnection && this.hubConnection.readyState === WebSocket.OPEN) {\n      this.hubConnection.send(JSON.stringify({\n        type: 'SendMessage',\n        receiverId,\n        content\n      }));\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  }\n  static {\n    this.ɵfac = function ChatService_Factory(t) {\n      return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ChatService,\n      factory: ChatService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Subject","environment","ChatService","constructor","http","authService","apiUrl","hubConnection","messageReceived","currentUser$","subscribe","user","connectToHub","close","onMessageReceived","asObservable","token","getToken","WebSocket","wsUrl","onopen","console","log","onmessage","event","data","JSON","parse","type","next","message","onclose","setTimeout","onerror","error","getConversations","get","getMessages","userId","sendMessage","receiverId","content","post","markAsRead","put","sendMessageViaSocket","readyState","OPEN","send","stringify","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\services\\chat.service.ts"],"sourcesContent":["// src/app/services/chat.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ChatMessage, Conversation } from '../models/chat-message.model';\r\nimport { environment } from '../../environments/environment';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatService {\r\n  private apiUrl = `${environment.apiUrl}/chat`;\r\n  private hubConnection: WebSocket | null = null;\r\n  private messageReceived = new Subject<ChatMessage>();\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) {\r\n    this.authService.currentUser$.subscribe(user => {\r\n      if (user) {\r\n        this.connectToHub();\r\n      } else if (this.hubConnection) {\r\n        this.hubConnection.close();\r\n        this.hubConnection = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  public onMessageReceived(): Observable<ChatMessage> {\r\n    return this.messageReceived.asObservable();\r\n  }\r\n\r\n  private connectToHub(): void {\r\n    const token = this.authService.getToken();\r\n    if (!token) return;\r\n\r\n    this.hubConnection = new WebSocket(`${environment.wsUrl}?access_token=${token}`);\r\n\r\n    this.hubConnection.onopen = () => {\r\n      console.log('WebSocket connection established');\r\n    };\r\n\r\n    this.hubConnection.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      if (data.type === 'ReceiveMessage') {\r\n        this.messageReceived.next(data.message);\r\n      }\r\n    };\r\n\r\n    this.hubConnection.onclose = () => {\r\n      console.log('WebSocket connection closed');\r\n      // Try to reconnect after a delay\r\n      setTimeout(() => this.connectToHub(), 5000);\r\n    };\r\n\r\n    this.hubConnection.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n  }\r\n\r\n  getConversations(): Observable<Conversation[]> {\r\n    return this.http.get<Conversation[]>(`${this.apiUrl}/conversations`);\r\n  }\r\n\r\n  getMessages(userId: string): Observable<ChatMessage[]> {\r\n    return this.http.get<ChatMessage[]>(`${this.apiUrl}/messages/${userId}`);\r\n  }\r\n\r\n  sendMessage(receiverId: string, content: string): Observable<ChatMessage> {\r\n    return this.http.post<ChatMessage>(`${this.apiUrl}/messages`, {\r\n      receiverId,\r\n      content\r\n    });\r\n  }\r\n\r\n  markAsRead(userId: string): Observable<any> {\r\n    return this.http.put(`${this.apiUrl}/read/${userId}`, {});\r\n  }\r\n\r\n  sendMessageViaSocket(receiverId: string, content: string): void {\r\n    if (this.hubConnection && this.hubConnection.readyState === WebSocket.OPEN) {\r\n      this.hubConnection.send(JSON.stringify({\r\n        type: 'SendMessage',\r\n        receiverId,\r\n        content\r\n      }));\r\n    } else {\r\n      console.error('WebSocket is not connected');\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}