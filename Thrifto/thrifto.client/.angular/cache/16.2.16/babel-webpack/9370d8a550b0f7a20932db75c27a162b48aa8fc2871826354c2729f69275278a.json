{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as signalR from '@microsoft/signalr';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class SignalrService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.hubConnection = null;\n    this.newListingSubject = new BehaviorSubject(null);\n    this.listingUpdateSubject = new BehaviorSubject(null);\n    this.listingDeleteSubject = new BehaviorSubject(null);\n    this.chartUpdateSubject = new BehaviorSubject(null);\n  }\n  get newListing$() {\n    return this.newListingSubject.asObservable();\n  }\n  get listingUpdate$() {\n    return this.listingUpdateSubject.asObservable();\n  }\n  get listingDelete$() {\n    return this.listingDeleteSubject.asObservable();\n  }\n  get chartUpdate$() {\n    return this.chartUpdateSubject.asObservable();\n  }\n  startConnection() {\n    return new Promise((resolve, reject) => {\n      this.hubConnection = new signalR.HubConnectionBuilder().withUrl(`${environment.apiUrl}/hubs/listing`, {\n        accessTokenFactory: () => this.authService.getToken() || ''\n      }).withAutomaticReconnect().build();\n      this.hubConnection.start().then(() => {\n        console.log('SignalR Connection started');\n        this.registerSignalRHandlers();\n        resolve();\n      }).catch(err => {\n        console.error('Error while starting SignalR connection: ', err);\n        reject(err);\n      });\n    });\n  }\n  stopConnection() {\n    if (this.hubConnection) {\n      this.hubConnection.stop().then(() => console.log('SignalR Connection stopped')).catch(err => console.error('Error while stopping SignalR connection: ', err));\n    }\n  }\n  registerSignalRHandlers() {\n    if (!this.hubConnection) return;\n    this.hubConnection.on('ReceiveNewListing', listing => {\n      console.log('New listing received:', listing);\n      this.newListingSubject.next(listing);\n    });\n    this.hubConnection.on('ReceiveListingUpdate', listing => {\n      console.log('Listing update received:', listing);\n      this.listingUpdateSubject.next(listing);\n    });\n    this.hubConnection.on('ReceiveListingDelete', listingId => {\n      console.log('Listing delete received:', listingId);\n      this.listingDeleteSubject.next(listingId);\n    });\n    this.hubConnection.on('ReceiveChartUpdate', chartData => {\n      console.log('Chart update received:', chartData);\n      this.chartUpdateSubject.next(chartData);\n    });\n  }\n  static {\n    this.ɵfac = function SignalrService_Factory(t) {\n      return new (t || SignalrService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SignalrService,\n      factory: SignalrService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","signalR","environment","SignalrService","constructor","http","authService","hubConnection","newListingSubject","listingUpdateSubject","listingDeleteSubject","chartUpdateSubject","newListing$","asObservable","listingUpdate$","listingDelete$","chartUpdate$","startConnection","Promise","resolve","reject","HubConnectionBuilder","withUrl","apiUrl","accessTokenFactory","getToken","withAutomaticReconnect","build","start","then","console","log","registerSignalRHandlers","catch","err","error","stopConnection","stop","on","listing","next","listingId","chartData","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\services\\signalr.service.ts"],"sourcesContent":["// src/app/services/signalr.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport * as signalR from '@microsoft/signalr';\r\nimport { environment } from '../../environments/environment';\r\nimport { AuthService } from './auth.service';\r\nimport { Listing } from '../models/listing.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SignalrService {\r\n  private hubConnection: signalR.HubConnection | null = null;\r\n  private newListingSubject = new BehaviorSubject<Listing | null>(null);\r\n  private listingUpdateSubject = new BehaviorSubject<Listing | null>(null);\r\n  private listingDeleteSubject = new BehaviorSubject<number | null>(null);\r\n  private chartUpdateSubject = new BehaviorSubject<any | null>(null);\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) { }\r\n\r\n  get newListing$(): Observable<Listing | null> {\r\n    return this.newListingSubject.asObservable();\r\n  }\r\n\r\n  get listingUpdate$(): Observable<Listing | null> {\r\n    return this.listingUpdateSubject.asObservable();\r\n  }\r\n\r\n  get listingDelete$(): Observable<number | null> {\r\n    return this.listingDeleteSubject.asObservable();\r\n  }\r\n\r\n  get chartUpdate$(): Observable<any | null> {\r\n    return this.chartUpdateSubject.asObservable();\r\n  }\r\n\r\n  startConnection(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.hubConnection = new signalR.HubConnectionBuilder()\r\n        .withUrl(`${environment.apiUrl}/hubs/listing`, {\r\n          accessTokenFactory: () => this.authService.getToken() || ''\r\n        })\r\n        .withAutomaticReconnect()\r\n        .build();\r\n\r\n      this.hubConnection\r\n        .start()\r\n        .then(() => {\r\n          console.log('SignalR Connection started');\r\n          this.registerSignalRHandlers();\r\n          resolve();\r\n        })\r\n        .catch(err => {\r\n          console.error('Error while starting SignalR connection: ', err);\r\n          reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  stopConnection(): void {\r\n    if (this.hubConnection) {\r\n      this.hubConnection.stop()\r\n        .then(() => console.log('SignalR Connection stopped'))\r\n        .catch(err => console.error('Error while stopping SignalR connection: ', err));\r\n    }\r\n  }\r\n\r\n  private registerSignalRHandlers(): void {\r\n    if (!this.hubConnection) return;\r\n\r\n    this.hubConnection.on('ReceiveNewListing', (listing: Listing) => {\r\n      console.log('New listing received:', listing);\r\n      this.newListingSubject.next(listing);\r\n    });\r\n\r\n    this.hubConnection.on('ReceiveListingUpdate', (listing: Listing) => {\r\n      console.log('Listing update received:', listing);\r\n      this.listingUpdateSubject.next(listing);\r\n    });\r\n\r\n    this.hubConnection.on('ReceiveListingDelete', (listingId: number) => {\r\n      console.log('Listing delete received:', listingId);\r\n      this.listingDeleteSubject.next(listingId);\r\n    });\r\n\r\n    this.hubConnection.on('ReceiveChartUpdate', (chartData: any) => {\r\n      console.log('Chart update received:', chartData);\r\n      this.chartUpdateSubject.next(chartData);\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,eAAe,QAAoB,MAAM;AAClD,OAAO,KAAKC,OAAO,MAAM,oBAAoB;AAC7C,SAASC,WAAW,QAAQ,gCAAgC;;;;AAO5D,OAAM,MAAOC,cAAc;EAOzBC,YACUC,IAAgB,EAChBC,WAAwB;IADxB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,WAAW,GAAXA,WAAW;IARb,KAAAC,aAAa,GAAiC,IAAI;IAClD,KAAAC,iBAAiB,GAAG,IAAIR,eAAe,CAAiB,IAAI,CAAC;IAC7D,KAAAS,oBAAoB,GAAG,IAAIT,eAAe,CAAiB,IAAI,CAAC;IAChE,KAAAU,oBAAoB,GAAG,IAAIV,eAAe,CAAgB,IAAI,CAAC;IAC/D,KAAAW,kBAAkB,GAAG,IAAIX,eAAe,CAAa,IAAI,CAAC;EAK9D;EAEJ,IAAIY,WAAWA,CAAA;IACb,OAAO,IAAI,CAACJ,iBAAiB,CAACK,YAAY,EAAE;EAC9C;EAEA,IAAIC,cAAcA,CAAA;IAChB,OAAO,IAAI,CAACL,oBAAoB,CAACI,YAAY,EAAE;EACjD;EAEA,IAAIE,cAAcA,CAAA;IAChB,OAAO,IAAI,CAACL,oBAAoB,CAACG,YAAY,EAAE;EACjD;EAEA,IAAIG,YAAYA,CAAA;IACd,OAAO,IAAI,CAACL,kBAAkB,CAACE,YAAY,EAAE;EAC/C;EAEAI,eAAeA,CAAA;IACb,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrC,IAAI,CAACb,aAAa,GAAG,IAAIN,OAAO,CAACoB,oBAAoB,EAAE,CACpDC,OAAO,CAAC,GAAGpB,WAAW,CAACqB,MAAM,eAAe,EAAE;QAC7CC,kBAAkB,EAAEA,CAAA,KAAM,IAAI,CAAClB,WAAW,CAACmB,QAAQ,EAAE,IAAI;OAC1D,CAAC,CACDC,sBAAsB,EAAE,CACxBC,KAAK,EAAE;MAEV,IAAI,CAACpB,aAAa,CACfqB,KAAK,EAAE,CACPC,IAAI,CAAC,MAAK;QACTC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QACzC,IAAI,CAACC,uBAAuB,EAAE;QAC9Bb,OAAO,EAAE;MACX,CAAC,CAAC,CACDc,KAAK,CAACC,GAAG,IAAG;QACXJ,OAAO,CAACK,KAAK,CAAC,2CAA2C,EAAED,GAAG,CAAC;QAC/Dd,MAAM,CAACc,GAAG,CAAC;MACb,CAAC,CAAC;IACN,CAAC,CAAC;EACJ;EAEAE,cAAcA,CAAA;IACZ,IAAI,IAAI,CAAC7B,aAAa,EAAE;MACtB,IAAI,CAACA,aAAa,CAAC8B,IAAI,EAAE,CACtBR,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAAC,CACrDE,KAAK,CAACC,GAAG,IAAIJ,OAAO,CAACK,KAAK,CAAC,2CAA2C,EAAED,GAAG,CAAC,CAAC;;EAEpF;EAEQF,uBAAuBA,CAAA;IAC7B,IAAI,CAAC,IAAI,CAACzB,aAAa,EAAE;IAEzB,IAAI,CAACA,aAAa,CAAC+B,EAAE,CAAC,mBAAmB,EAAGC,OAAgB,IAAI;MAC9DT,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEQ,OAAO,CAAC;MAC7C,IAAI,CAAC/B,iBAAiB,CAACgC,IAAI,CAACD,OAAO,CAAC;IACtC,CAAC,CAAC;IAEF,IAAI,CAAChC,aAAa,CAAC+B,EAAE,CAAC,sBAAsB,EAAGC,OAAgB,IAAI;MACjET,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEQ,OAAO,CAAC;MAChD,IAAI,CAAC9B,oBAAoB,CAAC+B,IAAI,CAACD,OAAO,CAAC;IACzC,CAAC,CAAC;IAEF,IAAI,CAAChC,aAAa,CAAC+B,EAAE,CAAC,sBAAsB,EAAGG,SAAiB,IAAI;MAClEX,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEU,SAAS,CAAC;MAClD,IAAI,CAAC/B,oBAAoB,CAAC8B,IAAI,CAACC,SAAS,CAAC;IAC3C,CAAC,CAAC;IAEF,IAAI,CAAClC,aAAa,CAAC+B,EAAE,CAAC,oBAAoB,EAAGI,SAAc,IAAI;MAC7DZ,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEW,SAAS,CAAC;MAChD,IAAI,CAAC/B,kBAAkB,CAAC6B,IAAI,CAACE,SAAS,CAAC;IACzC,CAAC,CAAC;EACJ;;;uBAjFWvC,cAAc,EAAAwC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAd7C,cAAc;MAAA8C,OAAA,EAAd9C,cAAc,CAAA+C,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}