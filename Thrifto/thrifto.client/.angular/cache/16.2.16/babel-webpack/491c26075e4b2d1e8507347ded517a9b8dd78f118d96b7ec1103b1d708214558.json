{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class PaginationService {\n  constructor() {\n    this.pageSubject = new BehaviorSubject(1);\n    this.pageSizeSubject = new BehaviorSubject(12); // Match your existing page size\n    this.totalCountSubject = new BehaviorSubject(0);\n    this.loadingSubject = new BehaviorSubject(false);\n    this.hasMoreSubject = new BehaviorSubject(true);\n  }\n  get page$() {\n    return this.pageSubject.asObservable();\n  }\n  get pageSize$() {\n    return this.pageSizeSubject.asObservable();\n  }\n  get totalCount$() {\n    return this.totalCountSubject.asObservable();\n  }\n  get loading$() {\n    return this.loadingSubject.asObservable();\n  }\n  get hasMore$() {\n    return this.hasMoreSubject.asObservable();\n  }\n  get currentPage() {\n    return this.pageSubject.value;\n  }\n  get currentPageSize() {\n    return this.pageSizeSubject.value;\n  }\n  get totalCount() {\n    return this.totalCountSubject.value;\n  }\n  get isLoading() {\n    return this.loadingSubject.value;\n  }\n  get hasMoreItems() {\n    return this.hasMoreSubject.value;\n  }\n  // ✅ ADD: Calculate remaining items\n  get remainingItems() {\n    const currentlyShown = this.currentPage * this.currentPageSize;\n    const remaining = this.totalCount - currentlyShown;\n    return Math.max(0, remaining);\n  }\n  // ✅ ADD: Calculate currently shown items\n  get currentlyShownItems() {\n    return Math.min(this.currentPage * this.currentPageSize, this.totalCount);\n  }\n  // ✅ ADD: Calculate percentage of items shown\n  get progressPercentage() {\n    if (this.totalCount === 0) return 0;\n    return Math.round(this.currentlyShownItems / this.totalCount * 100);\n  }\n  setPage(page) {\n    this.pageSubject.next(page);\n  }\n  setPageSize(pageSize) {\n    this.pageSizeSubject.next(pageSize);\n  }\n  setTotalCount(totalCount) {\n    this.totalCountSubject.next(totalCount);\n    // Update has more based on total count\n    this.updateHasMore();\n  }\n  setLoading(loading) {\n    this.loadingSubject.next(loading);\n  }\n  setHasMore(hasMore) {\n    this.hasMoreSubject.next(hasMore);\n  }\n  nextPage() {\n    if (this.hasMoreItems && !this.isLoading) {\n      this.setPage(this.currentPage + 1);\n    }\n  }\n  reset() {\n    this.setPage(1);\n    this.setTotalCount(0);\n    this.setLoading(false);\n    this.setHasMore(true);\n  }\n  updateHasMore() {\n    // If we have a total count, check if there are more items\n    if (this.totalCount > 0) {\n      const hasMore = this.currentPage * this.currentPageSize < this.totalCount;\n      this.setHasMore(hasMore);\n    }\n  }\n  // ✅ ADD: Get pagination info summary\n  getPaginationSummary() {\n    if (this.totalCount === 0) return 'No items';\n    const start = (this.currentPage - 1) * this.currentPageSize + 1;\n    const end = Math.min(this.currentPage * this.currentPageSize, this.totalCount);\n    return `Showing ${start}-${end} of ${this.totalCount} items`;\n  }\n  static {\n    this.ɵfac = function PaginationService_Factory(t) {\n      return new (t || PaginationService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PaginationService,\n      factory: PaginationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","PaginationService","constructor","pageSubject","pageSizeSubject","totalCountSubject","loadingSubject","hasMoreSubject","page$","asObservable","pageSize$","totalCount$","loading$","hasMore$","currentPage","value","currentPageSize","totalCount","isLoading","hasMoreItems","remainingItems","currentlyShown","remaining","Math","max","currentlyShownItems","min","progressPercentage","round","setPage","page","next","setPageSize","pageSize","setTotalCount","updateHasMore","setLoading","loading","setHasMore","hasMore","nextPage","reset","getPaginationSummary","start","end","factory","ɵfac","providedIn"],"sources":["C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\services\\pagination.service.ts"],"sourcesContent":["// src/app/services/pagination.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PaginationService {\r\n    private pageSubject = new BehaviorSubject<number>(1);\r\n    private pageSizeSubject = new BehaviorSubject<number>(12); // Match your existing page size\r\n    private totalCountSubject = new BehaviorSubject<number>(0);\r\n    private loadingSubject = new BehaviorSubject<boolean>(false);\r\n    private hasMoreSubject = new BehaviorSubject<boolean>(true);\r\n\r\n    constructor() { }\r\n\r\n    get page$(): Observable<number> {\r\n        return this.pageSubject.asObservable();\r\n    }\r\n\r\n    get pageSize$(): Observable<number> {\r\n        return this.pageSizeSubject.asObservable();\r\n    }\r\n\r\n    get totalCount$(): Observable<number> {\r\n        return this.totalCountSubject.asObservable();\r\n    }\r\n\r\n    get loading$(): Observable<boolean> {\r\n        return this.loadingSubject.asObservable();\r\n    }\r\n\r\n    get hasMore$(): Observable<boolean> {\r\n        return this.hasMoreSubject.asObservable();\r\n    }\r\n\r\n    get currentPage(): number {\r\n        return this.pageSubject.value;\r\n    }\r\n\r\n    get currentPageSize(): number {\r\n        return this.pageSizeSubject.value;\r\n    }\r\n\r\n    get totalCount(): number {\r\n        return this.totalCountSubject.value;\r\n    }\r\n\r\n    get isLoading(): boolean {\r\n        return this.loadingSubject.value;\r\n    }\r\n\r\n    get hasMoreItems(): boolean {\r\n        return this.hasMoreSubject.value;\r\n    }\r\n\r\n    // ✅ ADD: Calculate remaining items\r\n    get remainingItems(): number {\r\n        const currentlyShown = this.currentPage * this.currentPageSize;\r\n        const remaining = this.totalCount - currentlyShown;\r\n        return Math.max(0, remaining);\r\n    }\r\n\r\n    // ✅ ADD: Calculate currently shown items\r\n    get currentlyShownItems(): number {\r\n        return Math.min(this.currentPage * this.currentPageSize, this.totalCount);\r\n    }\r\n\r\n    // ✅ ADD: Calculate percentage of items shown\r\n    get progressPercentage(): number {\r\n        if (this.totalCount === 0) return 0;\r\n        return Math.round((this.currentlyShownItems / this.totalCount) * 100);\r\n    }\r\n\r\n    setPage(page: number): void {\r\n        this.pageSubject.next(page);\r\n    }\r\n\r\n    setPageSize(pageSize: number): void {\r\n        this.pageSizeSubject.next(pageSize);\r\n    }\r\n\r\n    setTotalCount(totalCount: number): void {\r\n        this.totalCountSubject.next(totalCount);\r\n        // Update has more based on total count\r\n        this.updateHasMore();\r\n    }\r\n\r\n    setLoading(loading: boolean): void {\r\n        this.loadingSubject.next(loading);\r\n    }\r\n\r\n    setHasMore(hasMore: boolean): void {\r\n        this.hasMoreSubject.next(hasMore);\r\n    }\r\n\r\n    nextPage(): void {\r\n        if (this.hasMoreItems && !this.isLoading) {\r\n            this.setPage(this.currentPage + 1);\r\n        }\r\n    }\r\n\r\n    reset(): void {\r\n        this.setPage(1);\r\n        this.setTotalCount(0);\r\n        this.setLoading(false);\r\n        this.setHasMore(true);\r\n    }\r\n\r\n    private updateHasMore(): void {\r\n        // If we have a total count, check if there are more items\r\n        if (this.totalCount > 0) {\r\n            const hasMore = this.currentPage * this.currentPageSize < this.totalCount;\r\n            this.setHasMore(hasMore);\r\n        }\r\n    }\r\n\r\n    // ✅ ADD: Get pagination info summary\r\n    getPaginationSummary(): string {\r\n        if (this.totalCount === 0) return 'No items';\r\n\r\n        const start = ((this.currentPage - 1) * this.currentPageSize) + 1;\r\n        const end = Math.min(this.currentPage * this.currentPageSize, this.totalCount);\r\n\r\n        return `Showing ${start}-${end} of ${this.totalCount} items`;\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}