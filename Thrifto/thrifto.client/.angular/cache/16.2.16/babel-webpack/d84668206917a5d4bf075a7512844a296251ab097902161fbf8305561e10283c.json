{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FeedbackService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/feedback`;\n  }\n  getUserFeedback(userId) {\n    return this.http.get(`${this.apiUrl}/user/${userId}`);\n  }\n  getUserRating(userId) {\n    return this.http.get(`${this.apiUrl}/user/${userId}/rating`);\n  }\n  createFeedback(feedbackData) {\n    return this.http.post(this.apiUrl, feedbackData);\n  }\n  static {\n    this.ɵfac = function FeedbackService_Factory(t) {\n      return new (t || FeedbackService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FeedbackService,\n      factory: FeedbackService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","FeedbackService","constructor","http","apiUrl","getUserFeedback","userId","get","getUserRating","createFeedback","feedbackData","post","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\services\\feedback.service.ts"],"sourcesContent":["// src/app/services/feedback.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Feedback } from '../models/feedback.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FeedbackService {\r\n  private apiUrl = `${environment.apiUrl}/feedback`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getUserFeedback(userId: string): Observable<Feedback[]> {\r\n    return this.http.get<Feedback[]>(`${this.apiUrl}/user/${userId}`);\r\n  }\r\n\r\n  getUserRating(userId: string): Observable<number> {\r\n    return this.http.get<number>(`${this.apiUrl}/user/${userId}/rating`);\r\n  }\r\n\r\n  createFeedback(feedbackData: { userId: string, rating: number, comment?: string }): Observable<Feedback> {\r\n    return this.http.post<Feedback>(this.apiUrl, feedbackData);\r\n  }\r\n}\r\n"],"mappings":"AAKA,SAASA,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,WAAW;EAET;EAExCC,eAAeA,CAACC,MAAc;IAC5B,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAa,GAAG,IAAI,CAACH,MAAM,SAASE,MAAM,EAAE,CAAC;EACnE;EAEAE,aAAaA,CAACF,MAAc;IAC1B,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAS,GAAG,IAAI,CAACH,MAAM,SAASE,MAAM,SAAS,CAAC;EACtE;EAEAG,cAAcA,CAACC,YAAkE;IAC/E,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAW,IAAI,CAACP,MAAM,EAAEM,YAAY,CAAC;EAC5D;;;uBAfWT,eAAe,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAfd,eAAe;MAAAe,OAAA,EAAff,eAAe,CAAAgB,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}