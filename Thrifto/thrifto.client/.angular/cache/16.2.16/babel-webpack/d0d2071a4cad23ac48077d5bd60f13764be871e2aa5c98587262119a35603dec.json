{"ast":null,"code":"// src/app/directives/infinite-scroll.directive.ts\nimport { EventEmitter } from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport { filter, map, throttleTime } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class InfiniteScrollDirective {\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n    this.scrollThreshold = 200; // Pixels from bottom to trigger load\n    this.immediateCheck = true; // Check on initialization\n    this.disabled = false; // To temporarily disable the scroll\n    this.scrolled = new EventEmitter();\n    this.scrollSubscription = null;\n  }\n  ngOnInit() {\n    if (this.disabled) {\n      return;\n    }\n    this.scrollSubscription = fromEvent(window, 'scroll').pipe(throttleTime(200),\n    // Limit check frequency\n    map(() => this.getCurrentScrollPosition()), filter(() => this.shouldTriggerLoad())).subscribe(() => {\n      this.scrolled.emit();\n    });\n    // Initial check\n    if (this.immediateCheck) {\n      setTimeout(() => {\n        if (this.shouldTriggerLoad()) {\n          this.scrolled.emit();\n        }\n      }, 0);\n    }\n  }\n  ngOnDestroy() {\n    if (this.scrollSubscription) {\n      this.scrollSubscription.unsubscribe();\n    }\n  }\n  getCurrentScrollPosition() {\n    return window.innerHeight + window.scrollY;\n  }\n  shouldTriggerLoad() {\n    const scrollHeight = document.documentElement.scrollHeight;\n    const scrollPosition = this.getCurrentScrollPosition();\n    return scrollPosition >= scrollHeight - this.scrollThreshold;\n  }\n  static {\n    this.ɵfac = function InfiniteScrollDirective_Factory(t) {\n      return new (t || InfiniteScrollDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n  }\n  static {\n    this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: InfiniteScrollDirective,\n      selectors: [[\"\", \"appInfiniteScroll\", \"\"]],\n      inputs: {\n        scrollThreshold: \"scrollThreshold\",\n        immediateCheck: \"immediateCheck\",\n        disabled: \"disabled\"\n      },\n      outputs: {\n        scrolled: \"scrolled\"\n      }\n    });\n  }\n}","map":{"version":3,"names":["EventEmitter","fromEvent","filter","map","throttleTime","InfiniteScrollDirective","constructor","elementRef","scrollThreshold","immediateCheck","disabled","scrolled","scrollSubscription","ngOnInit","window","pipe","getCurrentScrollPosition","shouldTriggerLoad","subscribe","emit","setTimeout","ngOnDestroy","unsubscribe","innerHeight","scrollY","scrollHeight","document","documentElement","scrollPosition","i0","ɵɵdirectiveInject","ElementRef","selectors","inputs","outputs"],"sources":["C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\directives\\infinite-scroll.directive.ts"],"sourcesContent":["// src/app/directives/infinite-scroll.directive.ts\r\nimport { Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { Subscription, fromEvent } from 'rxjs';\r\nimport { debounceTime, filter, map, throttleTime } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[appInfiniteScroll]'\r\n})\r\nexport class InfiniteScrollDirective implements OnInit, OnDestroy {\r\n  @Input() scrollThreshold = 200; // Pixels from bottom to trigger load\r\n  @Input() immediateCheck = true; // Check on initialization\r\n  @Input() disabled = false;      // To temporarily disable the scroll\r\n  @Output() scrolled = new EventEmitter<void>();\r\n\r\n  private scrollSubscription: Subscription | null = null;\r\n\r\n  constructor(private elementRef: ElementRef) { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.scrollSubscription = fromEvent(window, 'scroll')\r\n      .pipe(\r\n        throttleTime(200), // Limit check frequency\r\n        map(() => this.getCurrentScrollPosition()),\r\n        filter(() => this.shouldTriggerLoad())\r\n      )\r\n      .subscribe(() => {\r\n        this.scrolled.emit();\r\n      });\r\n\r\n    // Initial check\r\n    if (this.immediateCheck) {\r\n      setTimeout(() => {\r\n        if (this.shouldTriggerLoad()) {\r\n          this.scrolled.emit();\r\n        }\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.scrollSubscription) {\r\n      this.scrollSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private getCurrentScrollPosition(): number {\r\n    return (window.innerHeight + window.scrollY);\r\n  }\r\n\r\n  private shouldTriggerLoad(): boolean {\r\n    const scrollHeight = document.documentElement.scrollHeight;\r\n    const scrollPosition = this.getCurrentScrollPosition();\r\n    return scrollPosition >= scrollHeight - this.scrollThreshold;\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA,SAAgCA,YAAY,QAA0C,eAAe;AACrG,SAAuBC,SAAS,QAAQ,MAAM;AAC9C,SAAuBC,MAAM,EAAEC,GAAG,EAAEC,YAAY,QAAQ,gBAAgB;;AAKxE,OAAM,MAAOC,uBAAuB;EAQlCC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAPrB,KAAAC,eAAe,GAAG,GAAG,CAAC,CAAC;IACvB,KAAAC,cAAc,GAAG,IAAI,CAAC,CAAC;IACvB,KAAAC,QAAQ,GAAG,KAAK,CAAC,CAAM;IACtB,KAAAC,QAAQ,GAAG,IAAIX,YAAY,EAAQ;IAErC,KAAAY,kBAAkB,GAAwB,IAAI;EAER;EAE9CC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACH,QAAQ,EAAE;MACjB;;IAGF,IAAI,CAACE,kBAAkB,GAAGX,SAAS,CAACa,MAAM,EAAE,QAAQ,CAAC,CAClDC,IAAI,CACHX,YAAY,CAAC,GAAG,CAAC;IAAE;IACnBD,GAAG,CAAC,MAAM,IAAI,CAACa,wBAAwB,EAAE,CAAC,EAC1Cd,MAAM,CAAC,MAAM,IAAI,CAACe,iBAAiB,EAAE,CAAC,CACvC,CACAC,SAAS,CAAC,MAAK;MACd,IAAI,CAACP,QAAQ,CAACQ,IAAI,EAAE;IACtB,CAAC,CAAC;IAEJ;IACA,IAAI,IAAI,CAACV,cAAc,EAAE;MACvBW,UAAU,CAAC,MAAK;QACd,IAAI,IAAI,CAACH,iBAAiB,EAAE,EAAE;UAC5B,IAAI,CAACN,QAAQ,CAACQ,IAAI,EAAE;;MAExB,CAAC,EAAE,CAAC,CAAC;;EAET;EAEAE,WAAWA,CAAA;IACT,IAAI,IAAI,CAACT,kBAAkB,EAAE;MAC3B,IAAI,CAACA,kBAAkB,CAACU,WAAW,EAAE;;EAEzC;EAEQN,wBAAwBA,CAAA;IAC9B,OAAQF,MAAM,CAACS,WAAW,GAAGT,MAAM,CAACU,OAAO;EAC7C;EAEQP,iBAAiBA,CAAA;IACvB,MAAMQ,YAAY,GAAGC,QAAQ,CAACC,eAAe,CAACF,YAAY;IAC1D,MAAMG,cAAc,GAAG,IAAI,CAACZ,wBAAwB,EAAE;IACtD,OAAOY,cAAc,IAAIH,YAAY,GAAG,IAAI,CAACjB,eAAe;EAC9D;;;uBAjDWH,uBAAuB,EAAAwB,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;IAAA;EAAA;;;YAAvB1B,uBAAuB;MAAA2B,SAAA;MAAAC,MAAA;QAAAzB,eAAA;QAAAC,cAAA;QAAAC,QAAA;MAAA;MAAAwB,OAAA;QAAAvB,QAAA;MAAA;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}