{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class NotificationService {\n  constructor() {\n    this.notificationsSubject = new BehaviorSubject([]);\n    this.notifications$ = this.notificationsSubject.asObservable();\n  }\n  show(message, type = 'info', autoClose = true) {\n    const id = this.generateId();\n    const notification = {\n      id,\n      message,\n      type,\n      autoClose\n    };\n    const currentNotifications = this.notificationsSubject.value;\n    this.notificationsSubject.next([...currentNotifications, notification]);\n    if (autoClose) {\n      setTimeout(() => {\n        this.close(id);\n      }, 5000);\n    }\n    return id;\n  }\n  close(id) {\n    const currentNotifications = this.notificationsSubject.value;\n    const updatedNotifications = currentNotifications.filter(n => n.id !== id);\n    this.notificationsSubject.next(updatedNotifications);\n  }\n  generateId() {\n    return `notification-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n  static {\n    this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","NotificationService","constructor","notificationsSubject","notifications$","asObservable","show","message","type","autoClose","id","generateId","notification","currentNotifications","value","next","setTimeout","close","updatedNotifications","filter","n","Date","now","Math","random","toString","substr","factory","ɵfac","providedIn"],"sources":["C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\services\\notification.service.ts"],"sourcesContent":["// src/app/services/notification.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  message: string;\r\n  type: 'success' | 'error' | 'info';\r\n  autoClose?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationService {\r\n  private notificationsSubject = new BehaviorSubject<Notification[]>([]);\r\n  public notifications$ = this.notificationsSubject.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  show(message: string, type: 'success' | 'error' | 'info' = 'info', autoClose: boolean = true): string {\r\n    const id = this.generateId();\r\n    const notification: Notification = {\r\n      id,\r\n      message,\r\n      type,\r\n      autoClose\r\n    };\r\n\r\n    const currentNotifications = this.notificationsSubject.value;\r\n    this.notificationsSubject.next([...currentNotifications, notification]);\r\n\r\n    if (autoClose) {\r\n      setTimeout(() => {\r\n        this.close(id);\r\n      }, 5000);\r\n    }\r\n\r\n    return id;\r\n  }\r\n\r\n  close(id: string): void {\r\n    const currentNotifications = this.notificationsSubject.value;\r\n    const updatedNotifications = currentNotifications.filter(n => n.id !== id);\r\n    this.notificationsSubject.next(updatedNotifications);\r\n  }\r\n\r\n  private generateId(): string {\r\n    return `notification-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;;AAYlD,OAAM,MAAOC,mBAAmB;EAI9BC,YAAA;IAHQ,KAAAC,oBAAoB,GAAG,IAAIH,eAAe,CAAiB,EAAE,CAAC;IAC/D,KAAAI,cAAc,GAAG,IAAI,CAACD,oBAAoB,CAACE,YAAY,EAAE;EAEhD;EAEhBC,IAAIA,CAACC,OAAe,EAAEC,IAAA,GAAqC,MAAM,EAAEC,SAAA,GAAqB,IAAI;IAC1F,MAAMC,EAAE,GAAG,IAAI,CAACC,UAAU,EAAE;IAC5B,MAAMC,YAAY,GAAiB;MACjCF,EAAE;MACFH,OAAO;MACPC,IAAI;MACJC;KACD;IAED,MAAMI,oBAAoB,GAAG,IAAI,CAACV,oBAAoB,CAACW,KAAK;IAC5D,IAAI,CAACX,oBAAoB,CAACY,IAAI,CAAC,CAAC,GAAGF,oBAAoB,EAAED,YAAY,CAAC,CAAC;IAEvE,IAAIH,SAAS,EAAE;MACbO,UAAU,CAAC,MAAK;QACd,IAAI,CAACC,KAAK,CAACP,EAAE,CAAC;MAChB,CAAC,EAAE,IAAI,CAAC;;IAGV,OAAOA,EAAE;EACX;EAEAO,KAAKA,CAACP,EAAU;IACd,MAAMG,oBAAoB,GAAG,IAAI,CAACV,oBAAoB,CAACW,KAAK;IAC5D,MAAMI,oBAAoB,GAAGL,oBAAoB,CAACM,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACV,EAAE,KAAKA,EAAE,CAAC;IAC1E,IAAI,CAACP,oBAAoB,CAACY,IAAI,CAACG,oBAAoB,CAAC;EACtD;EAEQP,UAAUA,CAAA;IAChB,OAAO,gBAAgBU,IAAI,CAACC,GAAG,EAAE,IAAIC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;EAChF;;;uBAnCWzB,mBAAmB;IAAA;EAAA;;;aAAnBA,mBAAmB;MAAA0B,OAAA,EAAnB1B,mBAAmB,CAAA2B,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}