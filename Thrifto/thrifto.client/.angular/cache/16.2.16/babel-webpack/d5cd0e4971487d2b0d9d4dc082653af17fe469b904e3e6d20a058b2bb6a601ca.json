{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/notification.service\";\nexport class AuthGuard {\n  constructor(authService, router, notificationService) {\n    this.authService = authService;\n    this.router = router;\n    this.notificationService = notificationService;\n  }\n  canActivate(route, state) {\n    if (this.authService.isLoggedIn()) {\n      return true;\n    }\n    this.notificationService.show('Please log in to access this page', 'info');\n    this.router.navigate(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthGuard","constructor","authService","router","notificationService","canActivate","route","state","isLoggedIn","show","navigate","queryParams","returnUrl","url","i0","ɵɵinject","i1","AuthService","i2","Router","i3","NotificationService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\leust\\source\\repos\\MPP-main\\Thrifto\\thrifto.client\\src\\app\\guards\\auth.guards.ts"],"sourcesContent":["// src/app/guards/auth.guards.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { NotificationService } from '../services/notification.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private notificationService: NotificationService\r\n  ) { }\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): boolean {\r\n    if (this.authService.isLoggedIn()) {\r\n      return true;\r\n    }\r\n\r\n    this.notificationService.show('Please log in to access this page', 'info');\r\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\r\n    return false;\r\n  }\r\n}\r\n"],"mappings":";;;;AASA,OAAM,MAAOA,SAAS;EACpBC,YACUC,WAAwB,EACxBC,MAAc,EACdC,mBAAwC;IAFxC,KAAAF,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,mBAAmB,GAAnBA,mBAAmB;EACzB;EAEJC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,IAAI,IAAI,CAACL,WAAW,CAACM,UAAU,EAAE,EAAE;MACjC,OAAO,IAAI;;IAGb,IAAI,CAACJ,mBAAmB,CAACK,IAAI,CAAC,mCAAmC,EAAE,MAAM,CAAC;IAC1E,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAEL,KAAK,CAACM;MAAG;IAAE,CAAE,CAAC;IAC3E,OAAO,KAAK;EACd;;;uBAlBWb,SAAS,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,mBAAA;IAAA;EAAA;;;aAATrB,SAAS;MAAAsB,OAAA,EAATtB,SAAS,CAAAuB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}