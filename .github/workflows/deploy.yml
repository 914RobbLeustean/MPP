name: Deploy to AWS ECS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: thrifto-backend
  ECR_REPOSITORY_FRONTEND: thrifto-frontend
  ECS_SERVICE: thrifto-service
  ECS_CLUSTER: thrifto-cluster
  STACK_NAME: thrifto-infrastructure

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy CloudFormation Infrastructure
      run: |
        aws cloudformation deploy \
          --template-file cloudformation.yml \
          --stack-name ${{ env.STACK_NAME }} \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }}

    - name: Create additional secrets in Secrets Manager
      run: |
        S3_BUCKET=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        # Create JWT secret
        aws secretsmanager create-secret \
          --name "thrifto/jwt" \
          --description "Thrifto JWT token key" \
          --secret-string "$(openssl rand -base64 64)" \
          --region ${{ env.AWS_REGION }} || echo "JWT secret already exists"
        
        # Store S3 bucket name
        aws secretsmanager create-secret \
          --name "thrifto/s3bucket" \
          --description "Thrifto S3 bucket name" \
          --secret-string "$S3_BUCKET" \
          --region ${{ env.AWS_REGION }} || echo "S3 bucket secret already exists"

    - name: Create ECR repositories if they don't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY_BACKEND --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY_BACKEND --region ${{ env.AWS_REGION }}
        
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY_FRONTEND --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY_FRONTEND --region ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image to Amazon ECR
      id: build-backend-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG -f Thrifto.Server/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Build, tag, and push frontend image to Amazon ECR
      id: build-frontend-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG -f thrifto.client/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

    - name: Update Task Definition with new images and secrets
      run: |
        # Get AWS Account ID
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Get the database secret ARN (auto-generated by RDS)
        DB_SECRET_ARN=$(aws rds describe-db-instances \
          --db-instance-identifier thrifto-database \
          --query 'DBInstances[0].MasterUserSecret.SecretArn' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        # Get other secret ARNs
        JWT_SECRET_ARN=$(aws secretsmanager describe-secret --secret-id "thrifto/jwt" --query 'ARN' --output text --region ${{ env.AWS_REGION }})
        S3_SECRET_ARN=$(aws secretsmanager describe-secret --secret-id "thrifto/s3bucket" --query 'ARN' --output text --region ${{ env.AWS_REGION }})
        
        # Update task definition with current values
        sed -i "s/ACCOUNT_ID/$AWS_ACCOUNT_ID/g" task-definition.json
        sed -i "s|thrifto-backend:latest|thrifto-backend:${{ github.sha }}|g" task-definition.json
        sed -i "s|thrifto-frontend:latest|thrifto-frontend:${{ github.sha }}|g" task-definition.json
        sed -i "s|arn:aws:secretsmanager:us-east-1:ACCOUNT_ID:secret:rds-db-credentials/thrifto-database-RANDOM|$DB_SECRET_ARN|g" task-definition.json
        sed -i "s|arn:aws:secretsmanager:us-east-1:ACCOUNT_ID:secret:thrifto/jwt-RANDOM|$JWT_SECRET_ARN|g" task-definition.json
        sed -i "s|arn:aws:secretsmanager:us-east-1:ACCOUNT_ID:secret:thrifto/s3bucket-RANDOM|$S3_SECRET_ARN|g" task-definition.json

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: task-definition.json
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Get Load Balancer URL
      run: |
        LB_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerURL`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        echo "Application deployed successfully!"
        echo "Access your application at: $LB_URL"